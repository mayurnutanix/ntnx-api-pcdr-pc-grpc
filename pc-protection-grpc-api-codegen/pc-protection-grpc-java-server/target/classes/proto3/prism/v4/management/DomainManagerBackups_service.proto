/*
 * Generated file proto3/prism/v4/management.proto.
 *
 * Product version: 0.0.1-SNAPSHOT
 *
 * Part of the PC Protection PC Client SDK
 *
 * (c) 2024 Nutanix Inc.  All rights reserved
 *
 */

syntax = "proto3";

package proto3.prism.v4.management;

option java_multiple_files = true;
option java_package = "proto3.prism.v4.management";
option go_package = "proto3/prism/v4/management";

import "proto3/prism/v4/api_version.proto";

import "proto3/prism/v4/http_method_options.proto";
import "proto3/prism/v4/management/management.proto";

service DomainManagerBackupsService {
    option (ntnx_api_version) = {
    MAJOR: "4",
    MINOR: "0",
    RELEASE_TYPE: "b",
    RELEASE_TYPE_REVISION: "1"
    };


  /*
   * uri: /prism/v4/management/domain-managers/{domainManagerExtId}/backup-targets
   * http method: POST
   * Create backup target 
   * Creates a cluster or object store as backup target on which the backup is required to be
stored. The maximum allowed backup targets at a given moment  for cluster is 3 and for object store is 1.
If any one of the cluster/object store does not qualify for backup, then the API will fail.

   */
  rpc createBackupTarget(CreateBackupTargetArg) returns (CreateBackupTargetRet) {
    option (ntnx_api_http) = {
      POST: "/prism/v4/management/domain-managers/{domainManagerExtId}/backup-targets"
    };
  }
  /*
   * uri: /prism/v4/management/domain-managers/{domainManagerExtId}/backup-targets/{extId}
   * http method: DELETE
   * Delete backup target 
   * Removes cluster/object store from backup targets. This will stop backup from being
taken on cluster/object store.

   */
  rpc deleteBackupTargetById(DeleteBackupTargetByIdArg) returns (DeleteBackupTargetByIdRet) {
    option (ntnx_api_http) = {
      DELETE: "/prism/v4/management/domain-managers/{domainManagerExtId}/backup-targets/{extId}"
    };
  }
  /*
   * uri: /prism/v4/management/domain-managers/{domainManagerExtId}/backup-targets/{extId}
   * http method: GET
   * Fetch backup target 
   * Retrieves the backup targets (cluster or object store) from domain manager. Returns the
backup config and lastSyncTimestamp to the user

   */
  rpc getBackupTargetById(GetBackupTargetByIdArg) returns (GetBackupTargetByIdRet) {
    option (ntnx_api_http) = {
      GET: "/prism/v4/management/domain-managers/{domainManagerExtId}/backup-targets/{extId}"
    };
  }
  /*
   * uri: /prism/v4/management/domain-managers/{domainManagerExtId}/backup-targets
   * http method: GET
   * List Backup Targets 
   * Lists backup targets (cluster or object store) configured for a given domain manager.

   */
  rpc listBackupTargets(ListBackupTargetsArg) returns (ListBackupTargetsRet) {
    option (ntnx_api_http) = {
      GET: "/prism/v4/management/domain-managers/{domainManagerExtId}/backup-targets"
    };
  }
  /*
   * uri: /prism/v4/management/domain-managers/{domainManagerExtId}/backup-targets/{extId}
   * http method: PUT
   * Update backup target 
   * Updates the credentials and/or rpo of the given objectstore

   */
  rpc updateBackupTargetById(UpdateBackupTargetByIdArg) returns (UpdateBackupTargetByIdRet) {
    option (ntnx_api_http) = {
      PUT: "/prism/v4/management/domain-managers/{domainManagerExtId}/backup-targets/{extId}"
    };
  }
}

/*
 * message containing all attributes expected in the createBackupTarget request
 */
message CreateBackupTargetArg {
  /*
   * The unique identifier for the domain manager that is to be restored.

   */
  string domain_manager_ext_id = 31001;
  /*
   * Creates a cluster or object store as backup target on which the backup is required to be
stored. The maximum allowed backup targets at a given moment  for cluster is 3 and for object store is 1.
If any one of the cluster/object store does not qualify for backup, then the API will fail.

   */
  proto3.prism.v4.management.BackupTarget body = 31002;
}

/*
 * message containing all attributes expected in the createBackupTarget response
 */
message CreateBackupTargetRet {
  /*
   * field containing expected response content
   */
  proto3.prism.v4.management.CreateBackupTargetApiResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the deleteBackupTargetById request
 */
message DeleteBackupTargetByIdArg {
  /*
   * The unique identifier for the domain manager that is to be restored.

   */
  string domain_manager_ext_id = 31001;
  /*
   * A globally unique identifier of an instance that is suitable for external consumption.

   */
  string ext_id = 31002;
}

/*
 * message containing all attributes expected in the deleteBackupTargetById response
 */
message DeleteBackupTargetByIdRet {
  /*
   * field containing expected response content
   */
  proto3.prism.v4.management.DeleteBackupTargetApiResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the getBackupTargetById request
 */
message GetBackupTargetByIdArg {
  /*
   * The unique identifier for the domain manager that is to be restored.

   */
  string domain_manager_ext_id = 31001;
  /*
   * A globally unique identifier of an instance that is suitable for external consumption.

   */
  string ext_id = 31002;
}

/*
 * message containing all attributes expected in the getBackupTargetById response
 */
message GetBackupTargetByIdRet {
  /*
   * field containing expected response content
   */
  proto3.prism.v4.management.GetBackupTargetApiResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the listBackupTargets request
 */
message ListBackupTargetsArg {
  /*
   * The unique identifier for the domain manager that is to be restored.

   */
  string domain_manager_ext_id = 31001;
}

/*
 * message containing all attributes expected in the listBackupTargets response
 */
message ListBackupTargetsRet {
  /*
   * field containing expected response content
   */
  proto3.prism.v4.management.ListBackupTargetsApiResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}
/*
 * message containing all attributes expected in the updateBackupTargetById request
 */
message UpdateBackupTargetByIdArg {
  /*
   * The unique identifier for the domain manager that is to be restored.

   */
  string domain_manager_ext_id = 31001;
  /*
   * A globally unique identifier of an instance that is suitable for external consumption.

   */
  string ext_id = 31002;
  /*
   * Updates the credentials and/or rpo of the given objectstore

   */
  proto3.prism.v4.management.BackupTarget body = 31003;
}

/*
 * message containing all attributes expected in the updateBackupTargetById response
 */
message UpdateBackupTargetByIdRet {
  /*
   * field containing expected response content
   */
  proto3.prism.v4.management.UpdateBackupTargetApiResponse content = 999;
  /*
   * map containing headers expected in response
   */
  map<string, string> reserved = 1000;
}