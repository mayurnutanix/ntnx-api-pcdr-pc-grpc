// Code generated by MockGen. DO NOT EDIT.
// Source: /opt/homebrew/Cellar/go/1.22.4/bin/pkg/mod/github.com/nutanix-core/go-cache@v0.0.0-20240616123053-5c075257d96c/infrastructure/cluster/client/genesis/genesis_interface.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	genesis "github.com/nutanix-core/go-cache/infrastructure/cluster/client/genesis"
	net "github.com/nutanix-core/go-cache/util-go/net"
)

// MockIClusterManagerSvc is a mock of IClusterManagerSvc interface.
type MockIClusterManagerSvc struct {
	ctrl     *gomock.Controller
	recorder *MockIClusterManagerSvcMockRecorder
}

// MockIClusterManagerSvcMockRecorder is the mock recorder for MockIClusterManagerSvc.
type MockIClusterManagerSvcMockRecorder struct {
	mock *MockIClusterManagerSvc
}

// NewMockIClusterManagerSvc creates a new mock instance.
func NewMockIClusterManagerSvc(ctrl *gomock.Controller) *MockIClusterManagerSvc {
	mock := &MockIClusterManagerSvc{ctrl: ctrl}
	mock.recorder = &MockIClusterManagerSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClusterManagerSvc) EXPECT() *MockIClusterManagerSvcMockRecorder {
	return m.recorder
}

// AfterRpcCall mocks base method.
func (m *MockIClusterManagerSvc) AfterRpcCall(rpc *net.ProtobufRpc, arg, ret interface{}, err error) error {
	m.ctrl.T.Helper()
	ret_2 := m.ctrl.Call(m, "AfterRpcCall", rpc, arg, ret, err)
	ret0, _ := ret_2[0].(error)
	return ret0
}

// AfterRpcCall indicates an expected call of AfterRpcCall.
func (mr *MockIClusterManagerSvcMockRecorder) AfterRpcCall(rpc, arg, ret, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterRpcCall", reflect.TypeOf((*MockIClusterManagerSvc)(nil).AfterRpcCall), rpc, arg, ret, err)
}

// BeforeRpcCall mocks base method.
func (m *MockIClusterManagerSvc) BeforeRpcCall(rpc *net.ProtobufRpc, arg, ret interface{}) error {
	m.ctrl.T.Helper()
	ret_2 := m.ctrl.Call(m, "BeforeRpcCall", rpc, arg, ret)
	ret0, _ := ret_2[0].(error)
	return ret0
}

// BeforeRpcCall indicates an expected call of BeforeRpcCall.
func (mr *MockIClusterManagerSvcMockRecorder) BeforeRpcCall(rpc, arg, ret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeRpcCall", reflect.TypeOf((*MockIClusterManagerSvc)(nil).BeforeRpcCall), rpc, arg, ret)
}

// CleanSelfEncryptingDrives mocks base method.
func (m *MockIClusterManagerSvc) CleanSelfEncryptingDrives(arg0 *genesis.CleanSelfEncryptingDriveArg, arg1 *genesis.CleanSelfEncryptingDriveRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanSelfEncryptingDrives", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanSelfEncryptingDrives indicates an expected call of CleanSelfEncryptingDrives.
func (mr *MockIClusterManagerSvcMockRecorder) CleanSelfEncryptingDrives(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanSelfEncryptingDrives", reflect.TypeOf((*MockIClusterManagerSvc)(nil).CleanSelfEncryptingDrives), arg0, arg1)
}

// IsUpgradeInProgress mocks base method.
func (m *MockIClusterManagerSvc) IsUpgradeInProgress(arg0 *genesis.IsUpgradeInProgressArg, arg1 *genesis.IsUpgradeInProgressRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpgradeInProgress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsUpgradeInProgress indicates an expected call of IsUpgradeInProgress.
func (mr *MockIClusterManagerSvcMockRecorder) IsUpgradeInProgress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpgradeInProgress", reflect.TypeOf((*MockIClusterManagerSvc)(nil).IsUpgradeInProgress), arg0, arg1)
}

// PerformNodeOperation mocks base method.
func (m *MockIClusterManagerSvc) PerformNodeOperation(arg0 *genesis.PerformNodeOperationArg, arg1 *genesis.PerformNodeOperationRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformNodeOperation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformNodeOperation indicates an expected call of PerformNodeOperation.
func (mr *MockIClusterManagerSvcMockRecorder) PerformNodeOperation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformNodeOperation", reflect.TypeOf((*MockIClusterManagerSvc)(nil).PerformNodeOperation), arg0, arg1)
}

// RebootCVMViaHypervisor mocks base method.
func (m *MockIClusterManagerSvc) RebootCVMViaHypervisor(arg0 *genesis.RebootCVMViaHypervisorArg, arg1 *genesis.RebootCVMViaHypervisorRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootCVMViaHypervisor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebootCVMViaHypervisor indicates an expected call of RebootCVMViaHypervisor.
func (mr *MockIClusterManagerSvcMockRecorder) RebootCVMViaHypervisor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootCVMViaHypervisor", reflect.TypeOf((*MockIClusterManagerSvc)(nil).RebootCVMViaHypervisor), arg0, arg1)
}

// SoftwareInstallStatus mocks base method.
func (m *MockIClusterManagerSvc) SoftwareInstallStatus(arg0 *genesis.NullArg, arg1 *genesis.SoftwareInstallStatusRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftwareInstallStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftwareInstallStatus indicates an expected call of SoftwareInstallStatus.
func (mr *MockIClusterManagerSvcMockRecorder) SoftwareInstallStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwareInstallStatus", reflect.TypeOf((*MockIClusterManagerSvc)(nil).SoftwareInstallStatus), arg0, arg1)
}

// StartAppDeployment mocks base method.
func (m *MockIClusterManagerSvc) StartAppDeployment(arg0 *genesis.StartAppDeploymentArg, arg1 *genesis.StartAppDeploymentRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAppDeployment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartAppDeployment indicates an expected call of StartAppDeployment.
func (mr *MockIClusterManagerSvcMockRecorder) StartAppDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppDeployment", reflect.TypeOf((*MockIClusterManagerSvc)(nil).StartAppDeployment), arg0, arg1)
}

// StartPCDeployment mocks base method.
func (m *MockIClusterManagerSvc) StartPCDeployment(arg0 *genesis.StartPCDeploymentArg, arg1 *genesis.StartPCDeploymentRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPCDeployment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartPCDeployment indicates an expected call of StartPCDeployment.
func (mr *MockIClusterManagerSvcMockRecorder) StartPCDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPCDeployment", reflect.TypeOf((*MockIClusterManagerSvc)(nil).StartPCDeployment), arg0, arg1)
}

// TargetSoftwareVersions mocks base method.
func (m *MockIClusterManagerSvc) TargetSoftwareVersions(arg0 *genesis.NullArg, arg1 *genesis.SoftwareVersionsRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetSoftwareVersions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TargetSoftwareVersions indicates an expected call of TargetSoftwareVersions.
func (mr *MockIClusterManagerSvcMockRecorder) TargetSoftwareVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetSoftwareVersions", reflect.TypeOf((*MockIClusterManagerSvc)(nil).TargetSoftwareVersions), arg0, arg1)
}

// VerifyAndUpdateZkMapping mocks base method.
func (m *MockIClusterManagerSvc) VerifyAndUpdateZkMapping(arg0 *genesis.VerifyAndUpdateZkMappingArg, arg1 *genesis.VerifyAndUpdateZkMappingRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAndUpdateZkMapping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAndUpdateZkMapping indicates an expected call of VerifyAndUpdateZkMapping.
func (mr *MockIClusterManagerSvcMockRecorder) VerifyAndUpdateZkMapping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAndUpdateZkMapping", reflect.TypeOf((*MockIClusterManagerSvc)(nil).VerifyAndUpdateZkMapping), arg0, arg1)
}

// MockIClusterManagerClient is a mock of IClusterManagerClient interface.
type MockIClusterManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClusterManagerClientMockRecorder
}

// MockIClusterManagerClientMockRecorder is the mock recorder for MockIClusterManagerClient.
type MockIClusterManagerClientMockRecorder struct {
	mock *MockIClusterManagerClient
}

// NewMockIClusterManagerClient creates a new mock instance.
func NewMockIClusterManagerClient(ctrl *gomock.Controller) *MockIClusterManagerClient {
	mock := &MockIClusterManagerClient{ctrl: ctrl}
	mock.recorder = &MockIClusterManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClusterManagerClient) EXPECT() *MockIClusterManagerClientMockRecorder {
	return m.recorder
}

// CleanSelfEncryptingDrives mocks base method.
func (m *MockIClusterManagerClient) CleanSelfEncryptingDrives(arg0 *genesis.CleanSelfEncryptingDriveArg) (*genesis.CleanSelfEncryptingDriveRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanSelfEncryptingDrives", arg0)
	ret0, _ := ret[0].(*genesis.CleanSelfEncryptingDriveRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanSelfEncryptingDrives indicates an expected call of CleanSelfEncryptingDrives.
func (mr *MockIClusterManagerClientMockRecorder) CleanSelfEncryptingDrives(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanSelfEncryptingDrives", reflect.TypeOf((*MockIClusterManagerClient)(nil).CleanSelfEncryptingDrives), arg0)
}

// IsUpgradeInProgress mocks base method.
func (m *MockIClusterManagerClient) IsUpgradeInProgress(arg0 *genesis.IsUpgradeInProgressArg) (*genesis.IsUpgradeInProgressRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpgradeInProgress", arg0)
	ret0, _ := ret[0].(*genesis.IsUpgradeInProgressRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUpgradeInProgress indicates an expected call of IsUpgradeInProgress.
func (mr *MockIClusterManagerClientMockRecorder) IsUpgradeInProgress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpgradeInProgress", reflect.TypeOf((*MockIClusterManagerClient)(nil).IsUpgradeInProgress), arg0)
}

// PerformNodeOperation mocks base method.
func (m *MockIClusterManagerClient) PerformNodeOperation(arg0 *genesis.PerformNodeOperationArg) (*genesis.PerformNodeOperationRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformNodeOperation", arg0)
	ret0, _ := ret[0].(*genesis.PerformNodeOperationRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformNodeOperation indicates an expected call of PerformNodeOperation.
func (mr *MockIClusterManagerClientMockRecorder) PerformNodeOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformNodeOperation", reflect.TypeOf((*MockIClusterManagerClient)(nil).PerformNodeOperation), arg0)
}

// RebootCVMViaHypervisor mocks base method.
func (m *MockIClusterManagerClient) RebootCVMViaHypervisor(arg0 *genesis.RebootCVMViaHypervisorArg) (*genesis.RebootCVMViaHypervisorRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootCVMViaHypervisor", arg0)
	ret0, _ := ret[0].(*genesis.RebootCVMViaHypervisorRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootCVMViaHypervisor indicates an expected call of RebootCVMViaHypervisor.
func (mr *MockIClusterManagerClientMockRecorder) RebootCVMViaHypervisor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootCVMViaHypervisor", reflect.TypeOf((*MockIClusterManagerClient)(nil).RebootCVMViaHypervisor), arg0)
}

// SoftwareInstallStatus mocks base method.
func (m *MockIClusterManagerClient) SoftwareInstallStatus(arg0 *genesis.NullArg) (*genesis.SoftwareInstallStatusRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftwareInstallStatus", arg0)
	ret0, _ := ret[0].(*genesis.SoftwareInstallStatusRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwareInstallStatus indicates an expected call of SoftwareInstallStatus.
func (mr *MockIClusterManagerClientMockRecorder) SoftwareInstallStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwareInstallStatus", reflect.TypeOf((*MockIClusterManagerClient)(nil).SoftwareInstallStatus), arg0)
}

// StartAppDeployment mocks base method.
func (m *MockIClusterManagerClient) StartAppDeployment(arg0 *genesis.StartAppDeploymentArg) (*genesis.StartAppDeploymentRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAppDeployment", arg0)
	ret0, _ := ret[0].(*genesis.StartAppDeploymentRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAppDeployment indicates an expected call of StartAppDeployment.
func (mr *MockIClusterManagerClientMockRecorder) StartAppDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppDeployment", reflect.TypeOf((*MockIClusterManagerClient)(nil).StartAppDeployment), arg0)
}

// StartPCDeployment mocks base method.
func (m *MockIClusterManagerClient) StartPCDeployment(arg0 *genesis.StartPCDeploymentArg) (*genesis.StartPCDeploymentRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPCDeployment", arg0)
	ret0, _ := ret[0].(*genesis.StartPCDeploymentRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPCDeployment indicates an expected call of StartPCDeployment.
func (mr *MockIClusterManagerClientMockRecorder) StartPCDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPCDeployment", reflect.TypeOf((*MockIClusterManagerClient)(nil).StartPCDeployment), arg0)
}

// TargetSoftwareVersions mocks base method.
func (m *MockIClusterManagerClient) TargetSoftwareVersions(arg0 *genesis.NullArg) (*genesis.SoftwareVersionsRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetSoftwareVersions", arg0)
	ret0, _ := ret[0].(*genesis.SoftwareVersionsRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TargetSoftwareVersions indicates an expected call of TargetSoftwareVersions.
func (mr *MockIClusterManagerClientMockRecorder) TargetSoftwareVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetSoftwareVersions", reflect.TypeOf((*MockIClusterManagerClient)(nil).TargetSoftwareVersions), arg0)
}

// VerifyAndUpdateZkMapping mocks base method.
func (m *MockIClusterManagerClient) VerifyAndUpdateZkMapping(arg0 *genesis.VerifyAndUpdateZkMappingArg) (*genesis.VerifyAndUpdateZkMappingRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAndUpdateZkMapping", arg0)
	ret0, _ := ret[0].(*genesis.VerifyAndUpdateZkMappingRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAndUpdateZkMapping indicates an expected call of VerifyAndUpdateZkMapping.
func (mr *MockIClusterManagerClientMockRecorder) VerifyAndUpdateZkMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAndUpdateZkMapping", reflect.TypeOf((*MockIClusterManagerClient)(nil).VerifyAndUpdateZkMapping), arg0)
}

// MockISnapshotManagerSvc is a mock of ISnapshotManagerSvc interface.
type MockISnapshotManagerSvc struct {
	ctrl     *gomock.Controller
	recorder *MockISnapshotManagerSvcMockRecorder
}

// MockISnapshotManagerSvcMockRecorder is the mock recorder for MockISnapshotManagerSvc.
type MockISnapshotManagerSvcMockRecorder struct {
	mock *MockISnapshotManagerSvc
}

// NewMockISnapshotManagerSvc creates a new mock instance.
func NewMockISnapshotManagerSvc(ctrl *gomock.Controller) *MockISnapshotManagerSvc {
	mock := &MockISnapshotManagerSvc{ctrl: ctrl}
	mock.recorder = &MockISnapshotManagerSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISnapshotManagerSvc) EXPECT() *MockISnapshotManagerSvcMockRecorder {
	return m.recorder
}

// AfterRpcCall mocks base method.
func (m *MockISnapshotManagerSvc) AfterRpcCall(rpc *net.ProtobufRpc, arg, ret interface{}, err error) error {
	m.ctrl.T.Helper()
	ret_2 := m.ctrl.Call(m, "AfterRpcCall", rpc, arg, ret, err)
	ret0, _ := ret_2[0].(error)
	return ret0
}

// AfterRpcCall indicates an expected call of AfterRpcCall.
func (mr *MockISnapshotManagerSvcMockRecorder) AfterRpcCall(rpc, arg, ret, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterRpcCall", reflect.TypeOf((*MockISnapshotManagerSvc)(nil).AfterRpcCall), rpc, arg, ret, err)
}

// BeforeRpcCall mocks base method.
func (m *MockISnapshotManagerSvc) BeforeRpcCall(rpc *net.ProtobufRpc, arg, ret interface{}) error {
	m.ctrl.T.Helper()
	ret_2 := m.ctrl.Call(m, "BeforeRpcCall", rpc, arg, ret)
	ret0, _ := ret_2[0].(error)
	return ret0
}

// BeforeRpcCall indicates an expected call of BeforeRpcCall.
func (mr *MockISnapshotManagerSvcMockRecorder) BeforeRpcCall(rpc, arg, ret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeRpcCall", reflect.TypeOf((*MockISnapshotManagerSvc)(nil).BeforeRpcCall), rpc, arg, ret)
}

// DeleteSnapshot mocks base method.
func (m *MockISnapshotManagerSvc) DeleteSnapshot(arg0 *genesis.DeleteSnapshotArg, arg1 *genesis.DeleteSnapshotRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockISnapshotManagerSvcMockRecorder) DeleteSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockISnapshotManagerSvc)(nil).DeleteSnapshot), arg0, arg1)
}

// GetSnapshotStatus mocks base method.
func (m *MockISnapshotManagerSvc) GetSnapshotStatus(arg0 *genesis.GetSnapshotStatusArg, arg1 *genesis.GetSnapshotStatusRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSnapshotStatus indicates an expected call of GetSnapshotStatus.
func (mr *MockISnapshotManagerSvcMockRecorder) GetSnapshotStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotStatus", reflect.TypeOf((*MockISnapshotManagerSvc)(nil).GetSnapshotStatus), arg0, arg1)
}

// SnapshotMetadataVolume mocks base method.
func (m *MockISnapshotManagerSvc) SnapshotMetadataVolume(arg0 *genesis.SnapshotMetadataVolumeArg, arg1 *genesis.SnapshotMetadataVolumeRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotMetadataVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotMetadataVolume indicates an expected call of SnapshotMetadataVolume.
func (mr *MockISnapshotManagerSvcMockRecorder) SnapshotMetadataVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotMetadataVolume", reflect.TypeOf((*MockISnapshotManagerSvc)(nil).SnapshotMetadataVolume), arg0, arg1)
}

// MockISnapshotManagerClient is a mock of ISnapshotManagerClient interface.
type MockISnapshotManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockISnapshotManagerClientMockRecorder
}

// MockISnapshotManagerClientMockRecorder is the mock recorder for MockISnapshotManagerClient.
type MockISnapshotManagerClientMockRecorder struct {
	mock *MockISnapshotManagerClient
}

// NewMockISnapshotManagerClient creates a new mock instance.
func NewMockISnapshotManagerClient(ctrl *gomock.Controller) *MockISnapshotManagerClient {
	mock := &MockISnapshotManagerClient{ctrl: ctrl}
	mock.recorder = &MockISnapshotManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISnapshotManagerClient) EXPECT() *MockISnapshotManagerClientMockRecorder {
	return m.recorder
}

// DeleteSnapshot mocks base method.
func (m *MockISnapshotManagerClient) DeleteSnapshot(arg0 *genesis.DeleteSnapshotArg) (*genesis.DeleteSnapshotRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0)
	ret0, _ := ret[0].(*genesis.DeleteSnapshotRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockISnapshotManagerClientMockRecorder) DeleteSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockISnapshotManagerClient)(nil).DeleteSnapshot), arg0)
}

// GetSnapshotStatus mocks base method.
func (m *MockISnapshotManagerClient) GetSnapshotStatus(arg0 *genesis.GetSnapshotStatusArg) (*genesis.GetSnapshotStatusRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotStatus", arg0)
	ret0, _ := ret[0].(*genesis.GetSnapshotStatusRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotStatus indicates an expected call of GetSnapshotStatus.
func (mr *MockISnapshotManagerClientMockRecorder) GetSnapshotStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotStatus", reflect.TypeOf((*MockISnapshotManagerClient)(nil).GetSnapshotStatus), arg0)
}

// SnapshotMetadataVolume mocks base method.
func (m *MockISnapshotManagerClient) SnapshotMetadataVolume(arg0 *genesis.SnapshotMetadataVolumeArg) (*genesis.SnapshotMetadataVolumeRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotMetadataVolume", arg0)
	ret0, _ := ret[0].(*genesis.SnapshotMetadataVolumeRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotMetadataVolume indicates an expected call of SnapshotMetadataVolume.
func (mr *MockISnapshotManagerClientMockRecorder) SnapshotMetadataVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotMetadataVolume", reflect.TypeOf((*MockISnapshotManagerClient)(nil).SnapshotMetadataVolume), arg0)
}

// MockIGenesisRpcSvc is a mock of IGenesisRpcSvc interface.
type MockIGenesisRpcSvc struct {
	ctrl     *gomock.Controller
	recorder *MockIGenesisRpcSvcMockRecorder
}

// MockIGenesisRpcSvcMockRecorder is the mock recorder for MockIGenesisRpcSvc.
type MockIGenesisRpcSvcMockRecorder struct {
	mock *MockIGenesisRpcSvc
}

// NewMockIGenesisRpcSvc creates a new mock instance.
func NewMockIGenesisRpcSvc(ctrl *gomock.Controller) *MockIGenesisRpcSvc {
	mock := &MockIGenesisRpcSvc{ctrl: ctrl}
	mock.recorder = &MockIGenesisRpcSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGenesisRpcSvc) EXPECT() *MockIGenesisRpcSvcMockRecorder {
	return m.recorder
}

// AddCACertificate mocks base method.
func (m *MockIGenesisRpcSvc) AddCACertificate(arg0 *genesis.AddCACertificateArg, arg1 *genesis.AddCACertificateRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCACertificate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCACertificate indicates an expected call of AddCACertificate.
func (mr *MockIGenesisRpcSvcMockRecorder) AddCACertificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCACertificate", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).AddCACertificate), arg0, arg1)
}

// AddProductResourceLimits mocks base method.
func (m *MockIGenesisRpcSvc) AddProductResourceLimits(arg0 *genesis.AddProductResourceLimitsArg, arg1 *genesis.AddProductResourceLimitsRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductResourceLimits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductResourceLimits indicates an expected call of AddProductResourceLimits.
func (mr *MockIGenesisRpcSvcMockRecorder) AddProductResourceLimits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductResourceLimits", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).AddProductResourceLimits), arg0, arg1)
}

// AddSnmpTransports mocks base method.
func (m *MockIGenesisRpcSvc) AddSnmpTransports(arg0 *genesis.AddSnmpTransportsArg, arg1 *genesis.AddSnmpTransportsRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSnmpTransports", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSnmpTransports indicates an expected call of AddSnmpTransports.
func (mr *MockIGenesisRpcSvcMockRecorder) AddSnmpTransports(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSnmpTransports", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).AddSnmpTransports), arg0, arg1)
}

// AddSnmpTrap mocks base method.
func (m *MockIGenesisRpcSvc) AddSnmpTrap(arg0 *genesis.AddSnmpTrapArg, arg1 *genesis.AddSnmpTrapRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSnmpTrap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSnmpTrap indicates an expected call of AddSnmpTrap.
func (mr *MockIGenesisRpcSvcMockRecorder) AddSnmpTrap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSnmpTrap", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).AddSnmpTrap), arg0, arg1)
}

// AddSnmpUser mocks base method.
func (m *MockIGenesisRpcSvc) AddSnmpUser(arg0 *genesis.AddSnmpUserArg, arg1 *genesis.AddSnmpUserRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSnmpUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSnmpUser indicates an expected call of AddSnmpUser.
func (mr *MockIGenesisRpcSvcMockRecorder) AddSnmpUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSnmpUser", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).AddSnmpUser), arg0, arg1)
}

// AfterRpcCall mocks base method.
func (m *MockIGenesisRpcSvc) AfterRpcCall(rpc *net.ProtobufRpc, arg, ret interface{}, err error) error {
	m.ctrl.T.Helper()
	ret_2 := m.ctrl.Call(m, "AfterRpcCall", rpc, arg, ret, err)
	ret0, _ := ret_2[0].(error)
	return ret0
}

// AfterRpcCall indicates an expected call of AfterRpcCall.
func (mr *MockIGenesisRpcSvcMockRecorder) AfterRpcCall(rpc, arg, ret, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterRpcCall", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).AfterRpcCall), rpc, arg, ret, err)
}

// BeforeRpcCall mocks base method.
func (m *MockIGenesisRpcSvc) BeforeRpcCall(rpc *net.ProtobufRpc, arg, ret interface{}) error {
	m.ctrl.T.Helper()
	ret_2 := m.ctrl.Call(m, "BeforeRpcCall", rpc, arg, ret)
	ret0, _ := ret_2[0].(error)
	return ret0
}

// BeforeRpcCall indicates an expected call of BeforeRpcCall.
func (mr *MockIGenesisRpcSvcMockRecorder) BeforeRpcCall(rpc, arg, ret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeRpcCall", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).BeforeRpcCall), rpc, arg, ret)
}

// CleanSelfEncryptingDrives mocks base method.
func (m *MockIGenesisRpcSvc) CleanSelfEncryptingDrives(arg0 *genesis.CleanSelfEncryptingDriveArg, arg1 *genesis.CleanSelfEncryptingDriveRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanSelfEncryptingDrives", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanSelfEncryptingDrives indicates an expected call of CleanSelfEncryptingDrives.
func (mr *MockIGenesisRpcSvcMockRecorder) CleanSelfEncryptingDrives(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanSelfEncryptingDrives", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).CleanSelfEncryptingDrives), arg0, arg1)
}

// CreateRack mocks base method.
func (m *MockIGenesisRpcSvc) CreateRack(arg0 *genesis.CreateRackArg, arg1 *genesis.CreateRackRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRack", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRack indicates an expected call of CreateRack.
func (mr *MockIGenesisRpcSvcMockRecorder) CreateRack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRack", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).CreateRack), arg0, arg1)
}

// CreateRemoteSyslogServer mocks base method.
func (m *MockIGenesisRpcSvc) CreateRemoteSyslogServer(arg0 *genesis.CreateRemoteSyslogServerArg, arg1 *genesis.CreateRemoteSyslogServerRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemoteSyslogServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRemoteSyslogServer indicates an expected call of CreateRemoteSyslogServer.
func (mr *MockIGenesisRpcSvcMockRecorder) CreateRemoteSyslogServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemoteSyslogServer", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).CreateRemoteSyslogServer), arg0, arg1)
}

// DeleteCACertificate mocks base method.
func (m *MockIGenesisRpcSvc) DeleteCACertificate(arg0 *genesis.DeleteCACertificateArg, arg1 *genesis.DeleteCACertificateRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCACertificate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCACertificate indicates an expected call of DeleteCACertificate.
func (mr *MockIGenesisRpcSvcMockRecorder) DeleteCACertificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCACertificate", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).DeleteCACertificate), arg0, arg1)
}

// DeleteQoSForTraffic mocks base method.
func (m *MockIGenesisRpcSvc) DeleteQoSForTraffic(arg0 *genesis.NullArg, arg1 *genesis.DeleteQoSRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQoSForTraffic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQoSForTraffic indicates an expected call of DeleteQoSForTraffic.
func (mr *MockIGenesisRpcSvcMockRecorder) DeleteQoSForTraffic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQoSForTraffic", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).DeleteQoSForTraffic), arg0, arg1)
}

// DeleteRack mocks base method.
func (m *MockIGenesisRpcSvc) DeleteRack(arg0 *genesis.DeleteRackArg, arg1 *genesis.DeleteRackRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRack", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRack indicates an expected call of DeleteRack.
func (mr *MockIGenesisRpcSvcMockRecorder) DeleteRack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRack", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).DeleteRack), arg0, arg1)
}

// DeleteRemoteSyslogServer mocks base method.
func (m *MockIGenesisRpcSvc) DeleteRemoteSyslogServer(arg0 *genesis.DeleteRemoteSyslogServerArg, arg1 *genesis.DeleteRemoteSyslogServerRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemoteSyslogServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRemoteSyslogServer indicates an expected call of DeleteRemoteSyslogServer.
func (mr *MockIGenesisRpcSvcMockRecorder) DeleteRemoteSyslogServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemoteSyslogServer", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).DeleteRemoteSyslogServer), arg0, arg1)
}

// DeleteSnapshot mocks base method.
func (m *MockIGenesisRpcSvc) DeleteSnapshot(arg0 *genesis.DeleteSnapshotArg, arg1 *genesis.DeleteSnapshotRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockIGenesisRpcSvcMockRecorder) DeleteSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).DeleteSnapshot), arg0, arg1)
}

// DeleteSnmpTrap mocks base method.
func (m *MockIGenesisRpcSvc) DeleteSnmpTrap(arg0 *genesis.DeleteSnmpTrapArg, arg1 *genesis.DeleteSnmpTrapRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnmpTrap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnmpTrap indicates an expected call of DeleteSnmpTrap.
func (mr *MockIGenesisRpcSvcMockRecorder) DeleteSnmpTrap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnmpTrap", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).DeleteSnmpTrap), arg0, arg1)
}

// DeleteSnmpUser mocks base method.
func (m *MockIGenesisRpcSvc) DeleteSnmpUser(arg0 *genesis.DeleteSnmpUserArg, arg1 *genesis.DeleteSnmpUserRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnmpUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnmpUser indicates an expected call of DeleteSnmpUser.
func (mr *MockIGenesisRpcSvcMockRecorder) DeleteSnmpUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnmpUser", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).DeleteSnmpUser), arg0, arg1)
}

// EditQoS mocks base method.
func (m *MockIGenesisRpcSvc) EditQoS(arg0 *genesis.EditQoSArg, arg1 *genesis.EditQoSRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditQoS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditQoS indicates an expected call of EditQoS.
func (mr *MockIGenesisRpcSvcMockRecorder) EditQoS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditQoS", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).EditQoS), arg0, arg1)
}

// EnableCMSP mocks base method.
func (m *MockIGenesisRpcSvc) EnableCMSP(arg0 *genesis.EnableCMSPArg, arg1 *genesis.EnableCMSPRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCMSP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableCMSP indicates an expected call of EnableCMSP.
func (mr *MockIGenesisRpcSvcMockRecorder) EnableCMSP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCMSP", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).EnableCMSP), arg0, arg1)
}

// GetCACertificate mocks base method.
func (m *MockIGenesisRpcSvc) GetCACertificate(arg0 *genesis.GetCACertificateArg, arg1 *genesis.GetCACertificateRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCACertificate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCACertificate indicates an expected call of GetCACertificate.
func (mr *MockIGenesisRpcSvcMockRecorder) GetCACertificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCACertificate", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetCACertificate), arg0, arg1)
}

// GetCertificateChain mocks base method.
func (m *MockIGenesisRpcSvc) GetCertificateChain(arg0 *genesis.GetCertificateChainArg, arg1 *genesis.GetCertificateChainRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateChain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCertificateChain indicates an expected call of GetCertificateChain.
func (mr *MockIGenesisRpcSvcMockRecorder) GetCertificateChain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateChain", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetCertificateChain), arg0, arg1)
}

// GetConfigCredentials mocks base method.
func (m *MockIGenesisRpcSvc) GetConfigCredentials(arg0 *genesis.GetConfigCredentialsArg, arg1 *genesis.GetConfigCredentialsRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigCredentials", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConfigCredentials indicates an expected call of GetConfigCredentials.
func (mr *MockIGenesisRpcSvcMockRecorder) GetConfigCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigCredentials", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetConfigCredentials), arg0, arg1)
}

// GetEnabledPortfolioProducts mocks base method.
func (m *MockIGenesisRpcSvc) GetEnabledPortfolioProducts(arg0 *genesis.NullArg, arg1 *genesis.GetEnabledPortfolioProductsRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledPortfolioProducts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEnabledPortfolioProducts indicates an expected call of GetEnabledPortfolioProducts.
func (mr *MockIGenesisRpcSvcMockRecorder) GetEnabledPortfolioProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledPortfolioProducts", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetEnabledPortfolioProducts), arg0, arg1)
}

// GetFirewallRulesForClient mocks base method.
func (m *MockIGenesisRpcSvc) GetFirewallRulesForClient(arg0 *genesis.GetFirewallRulesForClientArg, arg1 *genesis.GetFirewallRulesForClientRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRulesForClient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFirewallRulesForClient indicates an expected call of GetFirewallRulesForClient.
func (mr *MockIGenesisRpcSvcMockRecorder) GetFirewallRulesForClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRulesForClient", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetFirewallRulesForClient), arg0, arg1)
}

// GetIPSet mocks base method.
func (m *MockIGenesisRpcSvc) GetIPSet(arg0 *genesis.GetIPSetArg, arg1 *genesis.GetIPSetRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetIPSet indicates an expected call of GetIPSet.
func (mr *MockIGenesisRpcSvcMockRecorder) GetIPSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSet", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetIPSet), arg0, arg1)
}

// GetIntermediateCARequest mocks base method.
func (m *MockIGenesisRpcSvc) GetIntermediateCARequest(arg0 *genesis.GetIntermediateCARequestArg, arg1 *genesis.GetIntermediateCARequestRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntermediateCARequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetIntermediateCARequest indicates an expected call of GetIntermediateCARequest.
func (mr *MockIGenesisRpcSvcMockRecorder) GetIntermediateCARequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntermediateCARequest", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetIntermediateCARequest), arg0, arg1)
}

// GetLicenseInfo mocks base method.
func (m *MockIGenesisRpcSvc) GetLicenseInfo(arg0 *genesis.NullArg, arg1 *genesis.GetLicenseInfoRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLicenseInfo indicates an expected call of GetLicenseInfo.
func (mr *MockIGenesisRpcSvcMockRecorder) GetLicenseInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseInfo", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetLicenseInfo), arg0, arg1)
}

// GetQoS mocks base method.
func (m *MockIGenesisRpcSvc) GetQoS(arg0 *genesis.NullArg, arg1 *genesis.GetQoSRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQoS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetQoS indicates an expected call of GetQoS.
func (mr *MockIGenesisRpcSvcMockRecorder) GetQoS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQoS", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetQoS), arg0, arg1)
}

// GetRemoteSyslogServers mocks base method.
func (m *MockIGenesisRpcSvc) GetRemoteSyslogServers(arg0 *genesis.NullArg, arg1 *genesis.GetRemoteSyslogServersRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteSyslogServers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRemoteSyslogServers indicates an expected call of GetRemoteSyslogServers.
func (mr *MockIGenesisRpcSvcMockRecorder) GetRemoteSyslogServers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteSyslogServers", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetRemoteSyslogServers), arg0, arg1)
}

// GetRootCACertificate mocks base method.
func (m *MockIGenesisRpcSvc) GetRootCACertificate(arg0 *genesis.NullArg, arg1 *genesis.GetCACertificateRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCACertificate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRootCACertificate indicates an expected call of GetRootCACertificate.
func (mr *MockIGenesisRpcSvcMockRecorder) GetRootCACertificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCACertificate", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetRootCACertificate), arg0, arg1)
}

// GetSnapshotStatus mocks base method.
func (m *MockIGenesisRpcSvc) GetSnapshotStatus(arg0 *genesis.GetSnapshotStatusArg, arg1 *genesis.GetSnapshotStatusRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSnapshotStatus indicates an expected call of GetSnapshotStatus.
func (mr *MockIGenesisRpcSvcMockRecorder) GetSnapshotStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotStatus", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).GetSnapshotStatus), arg0, arg1)
}

// IsNetSegInProgress mocks base method.
func (m *MockIGenesisRpcSvc) IsNetSegInProgress(arg0 *genesis.IsNetSegInProgressArg, arg1 *genesis.IsNetSegInProgressRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNetSegInProgress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsNetSegInProgress indicates an expected call of IsNetSegInProgress.
func (mr *MockIGenesisRpcSvcMockRecorder) IsNetSegInProgress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNetSegInProgress", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).IsNetSegInProgress), arg0, arg1)
}

// IsServiceEnabled mocks base method.
func (m *MockIGenesisRpcSvc) IsServiceEnabled(arg0 *genesis.IsServiceEnabledArg, arg1 *genesis.IsServiceEnabledRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServiceEnabled", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsServiceEnabled indicates an expected call of IsServiceEnabled.
func (mr *MockIGenesisRpcSvcMockRecorder) IsServiceEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServiceEnabled", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).IsServiceEnabled), arg0, arg1)
}

// IsUpgradeInProgress mocks base method.
func (m *MockIGenesisRpcSvc) IsUpgradeInProgress(arg0 *genesis.IsUpgradeInProgressArg, arg1 *genesis.IsUpgradeInProgressRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpgradeInProgress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsUpgradeInProgress indicates an expected call of IsUpgradeInProgress.
func (mr *MockIGenesisRpcSvcMockRecorder) IsUpgradeInProgress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpgradeInProgress", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).IsUpgradeInProgress), arg0, arg1)
}

// ModifyFirewall mocks base method.
func (m *MockIGenesisRpcSvc) ModifyFirewall(arg0 *genesis.ModifyFirewallArg, arg1 *genesis.ModifyFirewallRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyFirewall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyFirewall indicates an expected call of ModifyFirewall.
func (mr *MockIGenesisRpcSvcMockRecorder) ModifyFirewall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyFirewall", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).ModifyFirewall), arg0, arg1)
}

// ModifyFirewallOnCluster mocks base method.
func (m *MockIGenesisRpcSvc) ModifyFirewallOnCluster(arg0 *genesis.ModifyFirewallOnClusterArg, arg1 *genesis.ModifyFirewallOnClusterRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyFirewallOnCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyFirewallOnCluster indicates an expected call of ModifyFirewallOnCluster.
func (mr *MockIGenesisRpcSvcMockRecorder) ModifyFirewallOnCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyFirewallOnCluster", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).ModifyFirewallOnCluster), arg0, arg1)
}

// ModifyIPSet mocks base method.
func (m *MockIGenesisRpcSvc) ModifyIPSet(arg0 *genesis.ModifyIPSetArg, arg1 *genesis.ModifyIPSetRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyIPSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyIPSet indicates an expected call of ModifyIPSet.
func (mr *MockIGenesisRpcSvcMockRecorder) ModifyIPSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyIPSet", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).ModifyIPSet), arg0, arg1)
}

// PerformNodeOperation mocks base method.
func (m *MockIGenesisRpcSvc) PerformNodeOperation(arg0 *genesis.PerformNodeOperationArg, arg1 *genesis.PerformNodeOperationRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformNodeOperation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformNodeOperation indicates an expected call of PerformNodeOperation.
func (mr *MockIGenesisRpcSvcMockRecorder) PerformNodeOperation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformNodeOperation", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).PerformNodeOperation), arg0, arg1)
}

// RebootCVMViaHypervisor mocks base method.
func (m *MockIGenesisRpcSvc) RebootCVMViaHypervisor(arg0 *genesis.RebootCVMViaHypervisorArg, arg1 *genesis.RebootCVMViaHypervisorRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootCVMViaHypervisor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebootCVMViaHypervisor indicates an expected call of RebootCVMViaHypervisor.
func (mr *MockIGenesisRpcSvcMockRecorder) RebootCVMViaHypervisor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootCVMViaHypervisor", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).RebootCVMViaHypervisor), arg0, arg1)
}

// RemoveLegacyFirewallRulesForClient mocks base method.
func (m *MockIGenesisRpcSvc) RemoveLegacyFirewallRulesForClient(arg0 *genesis.RemoveLegacyFirewallRulesForClientArg, arg1 *genesis.RemoveLegacyFirewallRulesForClientRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLegacyFirewallRulesForClient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLegacyFirewallRulesForClient indicates an expected call of RemoveLegacyFirewallRulesForClient.
func (mr *MockIGenesisRpcSvcMockRecorder) RemoveLegacyFirewallRulesForClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLegacyFirewallRulesForClient", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).RemoveLegacyFirewallRulesForClient), arg0, arg1)
}

// RemoveSnmpTransports mocks base method.
func (m *MockIGenesisRpcSvc) RemoveSnmpTransports(arg0 *genesis.RemoveSnmpTransportsArg, arg1 *genesis.RemoveSnmpTransportsRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSnmpTransports", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSnmpTransports indicates an expected call of RemoveSnmpTransports.
func (mr *MockIGenesisRpcSvcMockRecorder) RemoveSnmpTransports(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSnmpTransports", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).RemoveSnmpTransports), arg0, arg1)
}

// ResetCertificateChain mocks base method.
func (m *MockIGenesisRpcSvc) ResetCertificateChain(arg0 *genesis.ResetCertificateChainArg, arg1 *genesis.ResetCertificateChainRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCertificateChain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetCertificateChain indicates an expected call of ResetCertificateChain.
func (mr *MockIGenesisRpcSvcMockRecorder) ResetCertificateChain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCertificateChain", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).ResetCertificateChain), arg0, arg1)
}

// SignCertificate mocks base method.
func (m *MockIGenesisRpcSvc) SignCertificate(arg0 *genesis.SignCertificateArg, arg1 *genesis.SignCertificateRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignCertificate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignCertificate indicates an expected call of SignCertificate.
func (mr *MockIGenesisRpcSvcMockRecorder) SignCertificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignCertificate", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).SignCertificate), arg0, arg1)
}

// SnapshotMetadataVolume mocks base method.
func (m *MockIGenesisRpcSvc) SnapshotMetadataVolume(arg0 *genesis.SnapshotMetadataVolumeArg, arg1 *genesis.SnapshotMetadataVolumeRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotMetadataVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnapshotMetadataVolume indicates an expected call of SnapshotMetadataVolume.
func (mr *MockIGenesisRpcSvcMockRecorder) SnapshotMetadataVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotMetadataVolume", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).SnapshotMetadataVolume), arg0, arg1)
}

// SoftwareInstallStatus mocks base method.
func (m *MockIGenesisRpcSvc) SoftwareInstallStatus(arg0 *genesis.NullArg, arg1 *genesis.SoftwareInstallStatusRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftwareInstallStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftwareInstallStatus indicates an expected call of SoftwareInstallStatus.
func (mr *MockIGenesisRpcSvcMockRecorder) SoftwareInstallStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwareInstallStatus", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).SoftwareInstallStatus), arg0, arg1)
}

// StartAppDeployment mocks base method.
func (m *MockIGenesisRpcSvc) StartAppDeployment(arg0 *genesis.StartAppDeploymentArg, arg1 *genesis.StartAppDeploymentRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAppDeployment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartAppDeployment indicates an expected call of StartAppDeployment.
func (mr *MockIGenesisRpcSvcMockRecorder) StartAppDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppDeployment", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).StartAppDeployment), arg0, arg1)
}

// StartPCDeployment mocks base method.
func (m *MockIGenesisRpcSvc) StartPCDeployment(arg0 *genesis.StartPCDeploymentArg, arg1 *genesis.StartPCDeploymentRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPCDeployment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartPCDeployment indicates an expected call of StartPCDeployment.
func (mr *MockIGenesisRpcSvcMockRecorder) StartPCDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPCDeployment", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).StartPCDeployment), arg0, arg1)
}

// SyncConfigFromZeusToIdf mocks base method.
func (m *MockIGenesisRpcSvc) SyncConfigFromZeusToIdf(arg0 *genesis.SyncConfigFromZeusToIdfArg, arg1 *genesis.SyncConfigFromZeusToIdfRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncConfigFromZeusToIdf", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncConfigFromZeusToIdf indicates an expected call of SyncConfigFromZeusToIdf.
func (mr *MockIGenesisRpcSvcMockRecorder) SyncConfigFromZeusToIdf(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncConfigFromZeusToIdf", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).SyncConfigFromZeusToIdf), arg0, arg1)
}

// TargetSoftwareVersions mocks base method.
func (m *MockIGenesisRpcSvc) TargetSoftwareVersions(arg0 *genesis.NullArg, arg1 *genesis.SoftwareVersionsRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetSoftwareVersions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TargetSoftwareVersions indicates an expected call of TargetSoftwareVersions.
func (mr *MockIGenesisRpcSvcMockRecorder) TargetSoftwareVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetSoftwareVersions", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).TargetSoftwareVersions), arg0, arg1)
}

// UpdateCategoryAssociations mocks base method.
func (m *MockIGenesisRpcSvc) UpdateCategoryAssociations(arg0 *genesis.UpdateCategoryAssociationsArg, arg1 *genesis.UpdateCategoryAssociationsRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryAssociations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategoryAssociations indicates an expected call of UpdateCategoryAssociations.
func (mr *MockIGenesisRpcSvcMockRecorder) UpdateCategoryAssociations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryAssociations", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).UpdateCategoryAssociations), arg0, arg1)
}

// UpdateCertificateChain mocks base method.
func (m *MockIGenesisRpcSvc) UpdateCertificateChain(arg0 *genesis.UpdateCertificateChainArg, arg1 *genesis.UpdateCertificateChainRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificateChain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateChain indicates an expected call of UpdateCertificateChain.
func (mr *MockIGenesisRpcSvcMockRecorder) UpdateCertificateChain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateChain", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).UpdateCertificateChain), arg0, arg1)
}

// UpdateCluster mocks base method.
func (m *MockIGenesisRpcSvc) UpdateCluster(arg0 *genesis.UpdateClusterArg, arg1 *genesis.UpdateClusterRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockIGenesisRpcSvcMockRecorder) UpdateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).UpdateCluster), arg0, arg1)
}

// UpdateHostname mocks base method.
func (m *MockIGenesisRpcSvc) UpdateHostname(arg0 *genesis.UpdateHostnameArg, arg1 *genesis.UpdateHostnameRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostname", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHostname indicates an expected call of UpdateHostname.
func (mr *MockIGenesisRpcSvcMockRecorder) UpdateHostname(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostname", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).UpdateHostname), arg0, arg1)
}

// UpdateRack mocks base method.
func (m *MockIGenesisRpcSvc) UpdateRack(arg0 *genesis.UpdateRackArg, arg1 *genesis.UpdateRackRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRack", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRack indicates an expected call of UpdateRack.
func (mr *MockIGenesisRpcSvcMockRecorder) UpdateRack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRack", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).UpdateRack), arg0, arg1)
}

// UpdateRackableUnit mocks base method.
func (m *MockIGenesisRpcSvc) UpdateRackableUnit(arg0 *genesis.UpdateRackableUnitArg, arg1 *genesis.UpdateRackableUnitRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRackableUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRackableUnit indicates an expected call of UpdateRackableUnit.
func (mr *MockIGenesisRpcSvcMockRecorder) UpdateRackableUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRackableUnit", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).UpdateRackableUnit), arg0, arg1)
}

// UpdateRemoteSyslogServer mocks base method.
func (m *MockIGenesisRpcSvc) UpdateRemoteSyslogServer(arg0 *genesis.UpdateRemoteSyslogServerArg, arg1 *genesis.UpdateRemoteSyslogServerRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteSyslogServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemoteSyslogServer indicates an expected call of UpdateRemoteSyslogServer.
func (mr *MockIGenesisRpcSvcMockRecorder) UpdateRemoteSyslogServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteSyslogServer", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).UpdateRemoteSyslogServer), arg0, arg1)
}

// UpdateSnmpStatus mocks base method.
func (m *MockIGenesisRpcSvc) UpdateSnmpStatus(arg0 *genesis.UpdateSnmpStatusArg, arg1 *genesis.UpdateSnmpStatusRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnmpStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnmpStatus indicates an expected call of UpdateSnmpStatus.
func (mr *MockIGenesisRpcSvcMockRecorder) UpdateSnmpStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnmpStatus", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).UpdateSnmpStatus), arg0, arg1)
}

// UpdateSnmpTrap mocks base method.
func (m *MockIGenesisRpcSvc) UpdateSnmpTrap(arg0 *genesis.UpdateSnmpTrapArg, arg1 *genesis.UpdateSnmpTrapRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnmpTrap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnmpTrap indicates an expected call of UpdateSnmpTrap.
func (mr *MockIGenesisRpcSvcMockRecorder) UpdateSnmpTrap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnmpTrap", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).UpdateSnmpTrap), arg0, arg1)
}

// UpdateSnmpUser mocks base method.
func (m *MockIGenesisRpcSvc) UpdateSnmpUser(arg0 *genesis.UpdateSnmpUserArg, arg1 *genesis.UpdateSnmpUserRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnmpUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnmpUser indicates an expected call of UpdateSnmpUser.
func (mr *MockIGenesisRpcSvcMockRecorder) UpdateSnmpUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnmpUser", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).UpdateSnmpUser), arg0, arg1)
}

// ValidateRemoteSyslogServer mocks base method.
func (m *MockIGenesisRpcSvc) ValidateRemoteSyslogServer(arg0 *genesis.ValidateRemoteSyslogServerArg, arg1 *genesis.ValidateRemoteSyslogServerRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRemoteSyslogServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRemoteSyslogServer indicates an expected call of ValidateRemoteSyslogServer.
func (mr *MockIGenesisRpcSvcMockRecorder) ValidateRemoteSyslogServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRemoteSyslogServer", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).ValidateRemoteSyslogServer), arg0, arg1)
}

// VerifyAndUpdateZkMapping mocks base method.
func (m *MockIGenesisRpcSvc) VerifyAndUpdateZkMapping(arg0 *genesis.VerifyAndUpdateZkMappingArg, arg1 *genesis.VerifyAndUpdateZkMappingRet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAndUpdateZkMapping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAndUpdateZkMapping indicates an expected call of VerifyAndUpdateZkMapping.
func (mr *MockIGenesisRpcSvcMockRecorder) VerifyAndUpdateZkMapping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAndUpdateZkMapping", reflect.TypeOf((*MockIGenesisRpcSvc)(nil).VerifyAndUpdateZkMapping), arg0, arg1)
}

// MockIGenesisRpcClient is a mock of IGenesisRpcClient interface.
type MockIGenesisRpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockIGenesisRpcClientMockRecorder
}

// MockIGenesisRpcClientMockRecorder is the mock recorder for MockIGenesisRpcClient.
type MockIGenesisRpcClientMockRecorder struct {
	mock *MockIGenesisRpcClient
}

// NewMockIGenesisRpcClient creates a new mock instance.
func NewMockIGenesisRpcClient(ctrl *gomock.Controller) *MockIGenesisRpcClient {
	mock := &MockIGenesisRpcClient{ctrl: ctrl}
	mock.recorder = &MockIGenesisRpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGenesisRpcClient) EXPECT() *MockIGenesisRpcClientMockRecorder {
	return m.recorder
}

// AddCACertificate mocks base method.
func (m *MockIGenesisRpcClient) AddCACertificate(arg0 *genesis.AddCACertificateArg) (*genesis.AddCACertificateRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCACertificate", arg0)
	ret0, _ := ret[0].(*genesis.AddCACertificateRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCACertificate indicates an expected call of AddCACertificate.
func (mr *MockIGenesisRpcClientMockRecorder) AddCACertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCACertificate", reflect.TypeOf((*MockIGenesisRpcClient)(nil).AddCACertificate), arg0)
}

// AddProductResourceLimits mocks base method.
func (m *MockIGenesisRpcClient) AddProductResourceLimits(arg0 *genesis.AddProductResourceLimitsArg) (*genesis.AddProductResourceLimitsRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductResourceLimits", arg0)
	ret0, _ := ret[0].(*genesis.AddProductResourceLimitsRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProductResourceLimits indicates an expected call of AddProductResourceLimits.
func (mr *MockIGenesisRpcClientMockRecorder) AddProductResourceLimits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductResourceLimits", reflect.TypeOf((*MockIGenesisRpcClient)(nil).AddProductResourceLimits), arg0)
}

// AddSnmpTransports mocks base method.
func (m *MockIGenesisRpcClient) AddSnmpTransports(arg0 *genesis.AddSnmpTransportsArg) (*genesis.AddSnmpTransportsRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSnmpTransports", arg0)
	ret0, _ := ret[0].(*genesis.AddSnmpTransportsRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSnmpTransports indicates an expected call of AddSnmpTransports.
func (mr *MockIGenesisRpcClientMockRecorder) AddSnmpTransports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSnmpTransports", reflect.TypeOf((*MockIGenesisRpcClient)(nil).AddSnmpTransports), arg0)
}

// AddSnmpTrap mocks base method.
func (m *MockIGenesisRpcClient) AddSnmpTrap(arg0 *genesis.AddSnmpTrapArg) (*genesis.AddSnmpTrapRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSnmpTrap", arg0)
	ret0, _ := ret[0].(*genesis.AddSnmpTrapRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSnmpTrap indicates an expected call of AddSnmpTrap.
func (mr *MockIGenesisRpcClientMockRecorder) AddSnmpTrap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSnmpTrap", reflect.TypeOf((*MockIGenesisRpcClient)(nil).AddSnmpTrap), arg0)
}

// AddSnmpUser mocks base method.
func (m *MockIGenesisRpcClient) AddSnmpUser(arg0 *genesis.AddSnmpUserArg) (*genesis.AddSnmpUserRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSnmpUser", arg0)
	ret0, _ := ret[0].(*genesis.AddSnmpUserRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSnmpUser indicates an expected call of AddSnmpUser.
func (mr *MockIGenesisRpcClientMockRecorder) AddSnmpUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSnmpUser", reflect.TypeOf((*MockIGenesisRpcClient)(nil).AddSnmpUser), arg0)
}

// CleanSelfEncryptingDrives mocks base method.
func (m *MockIGenesisRpcClient) CleanSelfEncryptingDrives(arg0 *genesis.CleanSelfEncryptingDriveArg) (*genesis.CleanSelfEncryptingDriveRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanSelfEncryptingDrives", arg0)
	ret0, _ := ret[0].(*genesis.CleanSelfEncryptingDriveRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanSelfEncryptingDrives indicates an expected call of CleanSelfEncryptingDrives.
func (mr *MockIGenesisRpcClientMockRecorder) CleanSelfEncryptingDrives(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanSelfEncryptingDrives", reflect.TypeOf((*MockIGenesisRpcClient)(nil).CleanSelfEncryptingDrives), arg0)
}

// CreateRack mocks base method.
func (m *MockIGenesisRpcClient) CreateRack(arg0 *genesis.CreateRackArg) (*genesis.CreateRackRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRack", arg0)
	ret0, _ := ret[0].(*genesis.CreateRackRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRack indicates an expected call of CreateRack.
func (mr *MockIGenesisRpcClientMockRecorder) CreateRack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRack", reflect.TypeOf((*MockIGenesisRpcClient)(nil).CreateRack), arg0)
}

// CreateRemoteSyslogServer mocks base method.
func (m *MockIGenesisRpcClient) CreateRemoteSyslogServer(arg0 *genesis.CreateRemoteSyslogServerArg) (*genesis.CreateRemoteSyslogServerRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemoteSyslogServer", arg0)
	ret0, _ := ret[0].(*genesis.CreateRemoteSyslogServerRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemoteSyslogServer indicates an expected call of CreateRemoteSyslogServer.
func (mr *MockIGenesisRpcClientMockRecorder) CreateRemoteSyslogServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemoteSyslogServer", reflect.TypeOf((*MockIGenesisRpcClient)(nil).CreateRemoteSyslogServer), arg0)
}

// DeleteCACertificate mocks base method.
func (m *MockIGenesisRpcClient) DeleteCACertificate(arg0 *genesis.DeleteCACertificateArg) (*genesis.DeleteCACertificateRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCACertificate", arg0)
	ret0, _ := ret[0].(*genesis.DeleteCACertificateRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCACertificate indicates an expected call of DeleteCACertificate.
func (mr *MockIGenesisRpcClientMockRecorder) DeleteCACertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCACertificate", reflect.TypeOf((*MockIGenesisRpcClient)(nil).DeleteCACertificate), arg0)
}

// DeleteQoSForTraffic mocks base method.
func (m *MockIGenesisRpcClient) DeleteQoSForTraffic(arg0 *genesis.NullArg) (*genesis.DeleteQoSRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQoSForTraffic", arg0)
	ret0, _ := ret[0].(*genesis.DeleteQoSRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQoSForTraffic indicates an expected call of DeleteQoSForTraffic.
func (mr *MockIGenesisRpcClientMockRecorder) DeleteQoSForTraffic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQoSForTraffic", reflect.TypeOf((*MockIGenesisRpcClient)(nil).DeleteQoSForTraffic), arg0)
}

// DeleteRack mocks base method.
func (m *MockIGenesisRpcClient) DeleteRack(arg0 *genesis.DeleteRackArg) (*genesis.DeleteRackRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRack", arg0)
	ret0, _ := ret[0].(*genesis.DeleteRackRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRack indicates an expected call of DeleteRack.
func (mr *MockIGenesisRpcClientMockRecorder) DeleteRack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRack", reflect.TypeOf((*MockIGenesisRpcClient)(nil).DeleteRack), arg0)
}

// DeleteRemoteSyslogServer mocks base method.
func (m *MockIGenesisRpcClient) DeleteRemoteSyslogServer(arg0 *genesis.DeleteRemoteSyslogServerArg) (*genesis.DeleteRemoteSyslogServerRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemoteSyslogServer", arg0)
	ret0, _ := ret[0].(*genesis.DeleteRemoteSyslogServerRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRemoteSyslogServer indicates an expected call of DeleteRemoteSyslogServer.
func (mr *MockIGenesisRpcClientMockRecorder) DeleteRemoteSyslogServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemoteSyslogServer", reflect.TypeOf((*MockIGenesisRpcClient)(nil).DeleteRemoteSyslogServer), arg0)
}

// DeleteSnapshot mocks base method.
func (m *MockIGenesisRpcClient) DeleteSnapshot(arg0 *genesis.DeleteSnapshotArg) (*genesis.DeleteSnapshotRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0)
	ret0, _ := ret[0].(*genesis.DeleteSnapshotRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockIGenesisRpcClientMockRecorder) DeleteSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockIGenesisRpcClient)(nil).DeleteSnapshot), arg0)
}

// DeleteSnmpTrap mocks base method.
func (m *MockIGenesisRpcClient) DeleteSnmpTrap(arg0 *genesis.DeleteSnmpTrapArg) (*genesis.DeleteSnmpTrapRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnmpTrap", arg0)
	ret0, _ := ret[0].(*genesis.DeleteSnmpTrapRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnmpTrap indicates an expected call of DeleteSnmpTrap.
func (mr *MockIGenesisRpcClientMockRecorder) DeleteSnmpTrap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnmpTrap", reflect.TypeOf((*MockIGenesisRpcClient)(nil).DeleteSnmpTrap), arg0)
}

// DeleteSnmpUser mocks base method.
func (m *MockIGenesisRpcClient) DeleteSnmpUser(arg0 *genesis.DeleteSnmpUserArg) (*genesis.DeleteSnmpUserRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnmpUser", arg0)
	ret0, _ := ret[0].(*genesis.DeleteSnmpUserRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnmpUser indicates an expected call of DeleteSnmpUser.
func (mr *MockIGenesisRpcClientMockRecorder) DeleteSnmpUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnmpUser", reflect.TypeOf((*MockIGenesisRpcClient)(nil).DeleteSnmpUser), arg0)
}

// EditQoS mocks base method.
func (m *MockIGenesisRpcClient) EditQoS(arg0 *genesis.EditQoSArg) (*genesis.EditQoSRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditQoS", arg0)
	ret0, _ := ret[0].(*genesis.EditQoSRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditQoS indicates an expected call of EditQoS.
func (mr *MockIGenesisRpcClientMockRecorder) EditQoS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditQoS", reflect.TypeOf((*MockIGenesisRpcClient)(nil).EditQoS), arg0)
}

// EnableCMSP mocks base method.
func (m *MockIGenesisRpcClient) EnableCMSP(arg0 *genesis.EnableCMSPArg) (*genesis.EnableCMSPRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCMSP", arg0)
	ret0, _ := ret[0].(*genesis.EnableCMSPRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableCMSP indicates an expected call of EnableCMSP.
func (mr *MockIGenesisRpcClientMockRecorder) EnableCMSP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCMSP", reflect.TypeOf((*MockIGenesisRpcClient)(nil).EnableCMSP), arg0)
}

// GetCACertificate mocks base method.
func (m *MockIGenesisRpcClient) GetCACertificate(arg0 *genesis.GetCACertificateArg) (*genesis.GetCACertificateRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCACertificate", arg0)
	ret0, _ := ret[0].(*genesis.GetCACertificateRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCACertificate indicates an expected call of GetCACertificate.
func (mr *MockIGenesisRpcClientMockRecorder) GetCACertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCACertificate", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetCACertificate), arg0)
}

// GetCertificateChain mocks base method.
func (m *MockIGenesisRpcClient) GetCertificateChain(arg0 *genesis.GetCertificateChainArg) (*genesis.GetCertificateChainRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateChain", arg0)
	ret0, _ := ret[0].(*genesis.GetCertificateChainRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateChain indicates an expected call of GetCertificateChain.
func (mr *MockIGenesisRpcClientMockRecorder) GetCertificateChain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateChain", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetCertificateChain), arg0)
}

// GetConfigCredentials mocks base method.
func (m *MockIGenesisRpcClient) GetConfigCredentials(arg0 *genesis.GetConfigCredentialsArg) (*genesis.GetConfigCredentialsRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigCredentials", arg0)
	ret0, _ := ret[0].(*genesis.GetConfigCredentialsRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigCredentials indicates an expected call of GetConfigCredentials.
func (mr *MockIGenesisRpcClientMockRecorder) GetConfigCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigCredentials", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetConfigCredentials), arg0)
}

// GetEnabledPortfolioProducts mocks base method.
func (m *MockIGenesisRpcClient) GetEnabledPortfolioProducts(arg0 *genesis.NullArg) (*genesis.GetEnabledPortfolioProductsRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledPortfolioProducts", arg0)
	ret0, _ := ret[0].(*genesis.GetEnabledPortfolioProductsRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledPortfolioProducts indicates an expected call of GetEnabledPortfolioProducts.
func (mr *MockIGenesisRpcClientMockRecorder) GetEnabledPortfolioProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledPortfolioProducts", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetEnabledPortfolioProducts), arg0)
}

// GetFirewallRulesForClient mocks base method.
func (m *MockIGenesisRpcClient) GetFirewallRulesForClient(arg0 *genesis.GetFirewallRulesForClientArg) (*genesis.GetFirewallRulesForClientRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRulesForClient", arg0)
	ret0, _ := ret[0].(*genesis.GetFirewallRulesForClientRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRulesForClient indicates an expected call of GetFirewallRulesForClient.
func (mr *MockIGenesisRpcClientMockRecorder) GetFirewallRulesForClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRulesForClient", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetFirewallRulesForClient), arg0)
}

// GetIPSet mocks base method.
func (m *MockIGenesisRpcClient) GetIPSet(arg0 *genesis.GetIPSetArg) (*genesis.GetIPSetRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPSet", arg0)
	ret0, _ := ret[0].(*genesis.GetIPSetRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPSet indicates an expected call of GetIPSet.
func (mr *MockIGenesisRpcClientMockRecorder) GetIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSet", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetIPSet), arg0)
}

// GetIntermediateCARequest mocks base method.
func (m *MockIGenesisRpcClient) GetIntermediateCARequest(arg0 *genesis.GetIntermediateCARequestArg) (*genesis.GetIntermediateCARequestRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntermediateCARequest", arg0)
	ret0, _ := ret[0].(*genesis.GetIntermediateCARequestRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntermediateCARequest indicates an expected call of GetIntermediateCARequest.
func (mr *MockIGenesisRpcClientMockRecorder) GetIntermediateCARequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntermediateCARequest", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetIntermediateCARequest), arg0)
}

// GetLicenseInfo mocks base method.
func (m *MockIGenesisRpcClient) GetLicenseInfo(arg0 *genesis.NullArg) (*genesis.GetLicenseInfoRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseInfo", arg0)
	ret0, _ := ret[0].(*genesis.GetLicenseInfoRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicenseInfo indicates an expected call of GetLicenseInfo.
func (mr *MockIGenesisRpcClientMockRecorder) GetLicenseInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseInfo", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetLicenseInfo), arg0)
}

// GetQoS mocks base method.
func (m *MockIGenesisRpcClient) GetQoS(arg0 *genesis.NullArg) (*genesis.GetQoSRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQoS", arg0)
	ret0, _ := ret[0].(*genesis.GetQoSRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQoS indicates an expected call of GetQoS.
func (mr *MockIGenesisRpcClientMockRecorder) GetQoS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQoS", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetQoS), arg0)
}

// GetRemoteSyslogServers mocks base method.
func (m *MockIGenesisRpcClient) GetRemoteSyslogServers(arg0 *genesis.NullArg) (*genesis.GetRemoteSyslogServersRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteSyslogServers", arg0)
	ret0, _ := ret[0].(*genesis.GetRemoteSyslogServersRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteSyslogServers indicates an expected call of GetRemoteSyslogServers.
func (mr *MockIGenesisRpcClientMockRecorder) GetRemoteSyslogServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteSyslogServers", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetRemoteSyslogServers), arg0)
}

// GetRootCACertificate mocks base method.
func (m *MockIGenesisRpcClient) GetRootCACertificate(arg0 *genesis.NullArg) (*genesis.GetCACertificateRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCACertificate", arg0)
	ret0, _ := ret[0].(*genesis.GetCACertificateRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootCACertificate indicates an expected call of GetRootCACertificate.
func (mr *MockIGenesisRpcClientMockRecorder) GetRootCACertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCACertificate", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetRootCACertificate), arg0)
}

// GetSnapshotStatus mocks base method.
func (m *MockIGenesisRpcClient) GetSnapshotStatus(arg0 *genesis.GetSnapshotStatusArg) (*genesis.GetSnapshotStatusRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotStatus", arg0)
	ret0, _ := ret[0].(*genesis.GetSnapshotStatusRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotStatus indicates an expected call of GetSnapshotStatus.
func (mr *MockIGenesisRpcClientMockRecorder) GetSnapshotStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotStatus", reflect.TypeOf((*MockIGenesisRpcClient)(nil).GetSnapshotStatus), arg0)
}

// IsNetSegInProgress mocks base method.
func (m *MockIGenesisRpcClient) IsNetSegInProgress(arg0 *genesis.IsNetSegInProgressArg) (*genesis.IsNetSegInProgressRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNetSegInProgress", arg0)
	ret0, _ := ret[0].(*genesis.IsNetSegInProgressRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsNetSegInProgress indicates an expected call of IsNetSegInProgress.
func (mr *MockIGenesisRpcClientMockRecorder) IsNetSegInProgress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNetSegInProgress", reflect.TypeOf((*MockIGenesisRpcClient)(nil).IsNetSegInProgress), arg0)
}

// IsServiceEnabled mocks base method.
func (m *MockIGenesisRpcClient) IsServiceEnabled(arg0 *genesis.IsServiceEnabledArg) (*genesis.IsServiceEnabledRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServiceEnabled", arg0)
	ret0, _ := ret[0].(*genesis.IsServiceEnabledRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServiceEnabled indicates an expected call of IsServiceEnabled.
func (mr *MockIGenesisRpcClientMockRecorder) IsServiceEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServiceEnabled", reflect.TypeOf((*MockIGenesisRpcClient)(nil).IsServiceEnabled), arg0)
}

// IsUpgradeInProgress mocks base method.
func (m *MockIGenesisRpcClient) IsUpgradeInProgress(arg0 *genesis.IsUpgradeInProgressArg) (*genesis.IsUpgradeInProgressRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpgradeInProgress", arg0)
	ret0, _ := ret[0].(*genesis.IsUpgradeInProgressRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUpgradeInProgress indicates an expected call of IsUpgradeInProgress.
func (mr *MockIGenesisRpcClientMockRecorder) IsUpgradeInProgress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpgradeInProgress", reflect.TypeOf((*MockIGenesisRpcClient)(nil).IsUpgradeInProgress), arg0)
}

// ModifyFirewall mocks base method.
func (m *MockIGenesisRpcClient) ModifyFirewall(arg0 *genesis.ModifyFirewallArg) (*genesis.ModifyFirewallRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyFirewall", arg0)
	ret0, _ := ret[0].(*genesis.ModifyFirewallRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyFirewall indicates an expected call of ModifyFirewall.
func (mr *MockIGenesisRpcClientMockRecorder) ModifyFirewall(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyFirewall", reflect.TypeOf((*MockIGenesisRpcClient)(nil).ModifyFirewall), arg0)
}

// ModifyFirewallOnCluster mocks base method.
func (m *MockIGenesisRpcClient) ModifyFirewallOnCluster(arg0 *genesis.ModifyFirewallOnClusterArg) (*genesis.ModifyFirewallOnClusterRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyFirewallOnCluster", arg0)
	ret0, _ := ret[0].(*genesis.ModifyFirewallOnClusterRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyFirewallOnCluster indicates an expected call of ModifyFirewallOnCluster.
func (mr *MockIGenesisRpcClientMockRecorder) ModifyFirewallOnCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyFirewallOnCluster", reflect.TypeOf((*MockIGenesisRpcClient)(nil).ModifyFirewallOnCluster), arg0)
}

// ModifyIPSet mocks base method.
func (m *MockIGenesisRpcClient) ModifyIPSet(arg0 *genesis.ModifyIPSetArg) (*genesis.ModifyIPSetRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyIPSet", arg0)
	ret0, _ := ret[0].(*genesis.ModifyIPSetRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyIPSet indicates an expected call of ModifyIPSet.
func (mr *MockIGenesisRpcClientMockRecorder) ModifyIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyIPSet", reflect.TypeOf((*MockIGenesisRpcClient)(nil).ModifyIPSet), arg0)
}

// PerformNodeOperation mocks base method.
func (m *MockIGenesisRpcClient) PerformNodeOperation(arg0 *genesis.PerformNodeOperationArg) (*genesis.PerformNodeOperationRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformNodeOperation", arg0)
	ret0, _ := ret[0].(*genesis.PerformNodeOperationRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformNodeOperation indicates an expected call of PerformNodeOperation.
func (mr *MockIGenesisRpcClientMockRecorder) PerformNodeOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformNodeOperation", reflect.TypeOf((*MockIGenesisRpcClient)(nil).PerformNodeOperation), arg0)
}

// RebootCVMViaHypervisor mocks base method.
func (m *MockIGenesisRpcClient) RebootCVMViaHypervisor(arg0 *genesis.RebootCVMViaHypervisorArg) (*genesis.RebootCVMViaHypervisorRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootCVMViaHypervisor", arg0)
	ret0, _ := ret[0].(*genesis.RebootCVMViaHypervisorRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootCVMViaHypervisor indicates an expected call of RebootCVMViaHypervisor.
func (mr *MockIGenesisRpcClientMockRecorder) RebootCVMViaHypervisor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootCVMViaHypervisor", reflect.TypeOf((*MockIGenesisRpcClient)(nil).RebootCVMViaHypervisor), arg0)
}

// RemoveLegacyFirewallRulesForClient mocks base method.
func (m *MockIGenesisRpcClient) RemoveLegacyFirewallRulesForClient(arg0 *genesis.RemoveLegacyFirewallRulesForClientArg) (*genesis.RemoveLegacyFirewallRulesForClientRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLegacyFirewallRulesForClient", arg0)
	ret0, _ := ret[0].(*genesis.RemoveLegacyFirewallRulesForClientRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLegacyFirewallRulesForClient indicates an expected call of RemoveLegacyFirewallRulesForClient.
func (mr *MockIGenesisRpcClientMockRecorder) RemoveLegacyFirewallRulesForClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLegacyFirewallRulesForClient", reflect.TypeOf((*MockIGenesisRpcClient)(nil).RemoveLegacyFirewallRulesForClient), arg0)
}

// RemoveSnmpTransports mocks base method.
func (m *MockIGenesisRpcClient) RemoveSnmpTransports(arg0 *genesis.RemoveSnmpTransportsArg) (*genesis.RemoveSnmpTransportsRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSnmpTransports", arg0)
	ret0, _ := ret[0].(*genesis.RemoveSnmpTransportsRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSnmpTransports indicates an expected call of RemoveSnmpTransports.
func (mr *MockIGenesisRpcClientMockRecorder) RemoveSnmpTransports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSnmpTransports", reflect.TypeOf((*MockIGenesisRpcClient)(nil).RemoveSnmpTransports), arg0)
}

// ResetCertificateChain mocks base method.
func (m *MockIGenesisRpcClient) ResetCertificateChain(arg0 *genesis.ResetCertificateChainArg) (*genesis.ResetCertificateChainRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCertificateChain", arg0)
	ret0, _ := ret[0].(*genesis.ResetCertificateChainRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetCertificateChain indicates an expected call of ResetCertificateChain.
func (mr *MockIGenesisRpcClientMockRecorder) ResetCertificateChain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCertificateChain", reflect.TypeOf((*MockIGenesisRpcClient)(nil).ResetCertificateChain), arg0)
}

// SignCertificate mocks base method.
func (m *MockIGenesisRpcClient) SignCertificate(arg0 *genesis.SignCertificateArg) (*genesis.SignCertificateRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignCertificate", arg0)
	ret0, _ := ret[0].(*genesis.SignCertificateRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignCertificate indicates an expected call of SignCertificate.
func (mr *MockIGenesisRpcClientMockRecorder) SignCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignCertificate", reflect.TypeOf((*MockIGenesisRpcClient)(nil).SignCertificate), arg0)
}

// SnapshotMetadataVolume mocks base method.
func (m *MockIGenesisRpcClient) SnapshotMetadataVolume(arg0 *genesis.SnapshotMetadataVolumeArg) (*genesis.SnapshotMetadataVolumeRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotMetadataVolume", arg0)
	ret0, _ := ret[0].(*genesis.SnapshotMetadataVolumeRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnapshotMetadataVolume indicates an expected call of SnapshotMetadataVolume.
func (mr *MockIGenesisRpcClientMockRecorder) SnapshotMetadataVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotMetadataVolume", reflect.TypeOf((*MockIGenesisRpcClient)(nil).SnapshotMetadataVolume), arg0)
}

// SoftwareInstallStatus mocks base method.
func (m *MockIGenesisRpcClient) SoftwareInstallStatus(arg0 *genesis.NullArg) (*genesis.SoftwareInstallStatusRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftwareInstallStatus", arg0)
	ret0, _ := ret[0].(*genesis.SoftwareInstallStatusRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwareInstallStatus indicates an expected call of SoftwareInstallStatus.
func (mr *MockIGenesisRpcClientMockRecorder) SoftwareInstallStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwareInstallStatus", reflect.TypeOf((*MockIGenesisRpcClient)(nil).SoftwareInstallStatus), arg0)
}

// StartAppDeployment mocks base method.
func (m *MockIGenesisRpcClient) StartAppDeployment(arg0 *genesis.StartAppDeploymentArg) (*genesis.StartAppDeploymentRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAppDeployment", arg0)
	ret0, _ := ret[0].(*genesis.StartAppDeploymentRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAppDeployment indicates an expected call of StartAppDeployment.
func (mr *MockIGenesisRpcClientMockRecorder) StartAppDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppDeployment", reflect.TypeOf((*MockIGenesisRpcClient)(nil).StartAppDeployment), arg0)
}

// StartPCDeployment mocks base method.
func (m *MockIGenesisRpcClient) StartPCDeployment(arg0 *genesis.StartPCDeploymentArg) (*genesis.StartPCDeploymentRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPCDeployment", arg0)
	ret0, _ := ret[0].(*genesis.StartPCDeploymentRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPCDeployment indicates an expected call of StartPCDeployment.
func (mr *MockIGenesisRpcClientMockRecorder) StartPCDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPCDeployment", reflect.TypeOf((*MockIGenesisRpcClient)(nil).StartPCDeployment), arg0)
}

// SyncConfigFromZeusToIdf mocks base method.
func (m *MockIGenesisRpcClient) SyncConfigFromZeusToIdf(arg0 *genesis.SyncConfigFromZeusToIdfArg) (*genesis.SyncConfigFromZeusToIdfRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncConfigFromZeusToIdf", arg0)
	ret0, _ := ret[0].(*genesis.SyncConfigFromZeusToIdfRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncConfigFromZeusToIdf indicates an expected call of SyncConfigFromZeusToIdf.
func (mr *MockIGenesisRpcClientMockRecorder) SyncConfigFromZeusToIdf(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncConfigFromZeusToIdf", reflect.TypeOf((*MockIGenesisRpcClient)(nil).SyncConfigFromZeusToIdf), arg0)
}

// TargetSoftwareVersions mocks base method.
func (m *MockIGenesisRpcClient) TargetSoftwareVersions(arg0 *genesis.NullArg) (*genesis.SoftwareVersionsRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetSoftwareVersions", arg0)
	ret0, _ := ret[0].(*genesis.SoftwareVersionsRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TargetSoftwareVersions indicates an expected call of TargetSoftwareVersions.
func (mr *MockIGenesisRpcClientMockRecorder) TargetSoftwareVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetSoftwareVersions", reflect.TypeOf((*MockIGenesisRpcClient)(nil).TargetSoftwareVersions), arg0)
}

// UpdateCategoryAssociations mocks base method.
func (m *MockIGenesisRpcClient) UpdateCategoryAssociations(arg0 *genesis.UpdateCategoryAssociationsArg) (*genesis.UpdateCategoryAssociationsRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryAssociations", arg0)
	ret0, _ := ret[0].(*genesis.UpdateCategoryAssociationsRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategoryAssociations indicates an expected call of UpdateCategoryAssociations.
func (mr *MockIGenesisRpcClientMockRecorder) UpdateCategoryAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryAssociations", reflect.TypeOf((*MockIGenesisRpcClient)(nil).UpdateCategoryAssociations), arg0)
}

// UpdateCertificateChain mocks base method.
func (m *MockIGenesisRpcClient) UpdateCertificateChain(arg0 *genesis.UpdateCertificateChainArg) (*genesis.UpdateCertificateChainRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificateChain", arg0)
	ret0, _ := ret[0].(*genesis.UpdateCertificateChainRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCertificateChain indicates an expected call of UpdateCertificateChain.
func (mr *MockIGenesisRpcClientMockRecorder) UpdateCertificateChain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateChain", reflect.TypeOf((*MockIGenesisRpcClient)(nil).UpdateCertificateChain), arg0)
}

// UpdateCluster mocks base method.
func (m *MockIGenesisRpcClient) UpdateCluster(arg0 *genesis.UpdateClusterArg) (*genesis.UpdateClusterRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0)
	ret0, _ := ret[0].(*genesis.UpdateClusterRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockIGenesisRpcClientMockRecorder) UpdateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockIGenesisRpcClient)(nil).UpdateCluster), arg0)
}

// UpdateHostname mocks base method.
func (m *MockIGenesisRpcClient) UpdateHostname(arg0 *genesis.UpdateHostnameArg) (*genesis.UpdateHostnameRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostname", arg0)
	ret0, _ := ret[0].(*genesis.UpdateHostnameRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostname indicates an expected call of UpdateHostname.
func (mr *MockIGenesisRpcClientMockRecorder) UpdateHostname(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostname", reflect.TypeOf((*MockIGenesisRpcClient)(nil).UpdateHostname), arg0)
}

// UpdateRack mocks base method.
func (m *MockIGenesisRpcClient) UpdateRack(arg0 *genesis.UpdateRackArg) (*genesis.UpdateRackRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRack", arg0)
	ret0, _ := ret[0].(*genesis.UpdateRackRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRack indicates an expected call of UpdateRack.
func (mr *MockIGenesisRpcClientMockRecorder) UpdateRack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRack", reflect.TypeOf((*MockIGenesisRpcClient)(nil).UpdateRack), arg0)
}

// UpdateRackableUnit mocks base method.
func (m *MockIGenesisRpcClient) UpdateRackableUnit(arg0 *genesis.UpdateRackableUnitArg) (*genesis.UpdateRackableUnitRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRackableUnit", arg0)
	ret0, _ := ret[0].(*genesis.UpdateRackableUnitRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRackableUnit indicates an expected call of UpdateRackableUnit.
func (mr *MockIGenesisRpcClientMockRecorder) UpdateRackableUnit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRackableUnit", reflect.TypeOf((*MockIGenesisRpcClient)(nil).UpdateRackableUnit), arg0)
}

// UpdateRemoteSyslogServer mocks base method.
func (m *MockIGenesisRpcClient) UpdateRemoteSyslogServer(arg0 *genesis.UpdateRemoteSyslogServerArg) (*genesis.UpdateRemoteSyslogServerRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteSyslogServer", arg0)
	ret0, _ := ret[0].(*genesis.UpdateRemoteSyslogServerRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRemoteSyslogServer indicates an expected call of UpdateRemoteSyslogServer.
func (mr *MockIGenesisRpcClientMockRecorder) UpdateRemoteSyslogServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteSyslogServer", reflect.TypeOf((*MockIGenesisRpcClient)(nil).UpdateRemoteSyslogServer), arg0)
}

// UpdateSnmpStatus mocks base method.
func (m *MockIGenesisRpcClient) UpdateSnmpStatus(arg0 *genesis.UpdateSnmpStatusArg) (*genesis.UpdateSnmpStatusRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnmpStatus", arg0)
	ret0, _ := ret[0].(*genesis.UpdateSnmpStatusRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSnmpStatus indicates an expected call of UpdateSnmpStatus.
func (mr *MockIGenesisRpcClientMockRecorder) UpdateSnmpStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnmpStatus", reflect.TypeOf((*MockIGenesisRpcClient)(nil).UpdateSnmpStatus), arg0)
}

// UpdateSnmpTrap mocks base method.
func (m *MockIGenesisRpcClient) UpdateSnmpTrap(arg0 *genesis.UpdateSnmpTrapArg) (*genesis.UpdateSnmpTrapRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnmpTrap", arg0)
	ret0, _ := ret[0].(*genesis.UpdateSnmpTrapRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSnmpTrap indicates an expected call of UpdateSnmpTrap.
func (mr *MockIGenesisRpcClientMockRecorder) UpdateSnmpTrap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnmpTrap", reflect.TypeOf((*MockIGenesisRpcClient)(nil).UpdateSnmpTrap), arg0)
}

// UpdateSnmpUser mocks base method.
func (m *MockIGenesisRpcClient) UpdateSnmpUser(arg0 *genesis.UpdateSnmpUserArg) (*genesis.UpdateSnmpUserRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnmpUser", arg0)
	ret0, _ := ret[0].(*genesis.UpdateSnmpUserRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSnmpUser indicates an expected call of UpdateSnmpUser.
func (mr *MockIGenesisRpcClientMockRecorder) UpdateSnmpUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnmpUser", reflect.TypeOf((*MockIGenesisRpcClient)(nil).UpdateSnmpUser), arg0)
}

// ValidateRemoteSyslogServer mocks base method.
func (m *MockIGenesisRpcClient) ValidateRemoteSyslogServer(arg0 *genesis.ValidateRemoteSyslogServerArg) (*genesis.ValidateRemoteSyslogServerRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRemoteSyslogServer", arg0)
	ret0, _ := ret[0].(*genesis.ValidateRemoteSyslogServerRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRemoteSyslogServer indicates an expected call of ValidateRemoteSyslogServer.
func (mr *MockIGenesisRpcClientMockRecorder) ValidateRemoteSyslogServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRemoteSyslogServer", reflect.TypeOf((*MockIGenesisRpcClient)(nil).ValidateRemoteSyslogServer), arg0)
}

// VerifyAndUpdateZkMapping mocks base method.
func (m *MockIGenesisRpcClient) VerifyAndUpdateZkMapping(arg0 *genesis.VerifyAndUpdateZkMappingArg) (*genesis.VerifyAndUpdateZkMappingRet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAndUpdateZkMapping", arg0)
	ret0, _ := ret[0].(*genesis.VerifyAndUpdateZkMappingRet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAndUpdateZkMapping indicates an expected call of VerifyAndUpdateZkMapping.
func (mr *MockIGenesisRpcClientMockRecorder) VerifyAndUpdateZkMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAndUpdateZkMapping", reflect.TypeOf((*MockIGenesisRpcClient)(nil).VerifyAndUpdateZkMapping), arg0)
}
