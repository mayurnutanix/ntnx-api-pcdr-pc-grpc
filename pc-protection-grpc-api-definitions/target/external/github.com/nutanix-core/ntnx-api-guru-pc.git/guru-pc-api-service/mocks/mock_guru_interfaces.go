// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/harshoo3/workspace/prism-guru/ntnx-api-guru-pc/guru-pc-api-service/interfaces/external/singleton.go

// Package mocks is a generated GoMock package.
package mocks

import (
	external "ntnx-api-guru-pc/guru-pc-api-service/interfaces/external"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/golang/protobuf/proto"
	ergon_client "github.com/nutanix-core/go-cache/ergon/client"
	genesis "github.com/nutanix-core/go-cache/infrastructure/cluster/client/genesis"
	insights_interface "github.com/nutanix-core/go-cache/insights/insights_interface"
	db "github.com/nutanix-core/go-cache/nusights/util/db"
	uuid4 "github.com/nutanix-core/go-cache/util-go/uuid4"
	zeus "github.com/nutanix-core/go-cache/zeus"
	ergon "github.com/nutanix-core/ntnx-api-guru/services/ergon"
	events "github.com/nutanix-core/ntnx-api-guru/services/events"
	guru_api "github.com/nutanix-core/ntnx-api-guru/services/guru_api"
	idf "github.com/nutanix-core/ntnx-api-guru/services/idf"
	zk "github.com/nutanix-core/ntnx-api-guru/services/zk"
	idempotencyutils "github.com/nutanix-core/ntnx-api-utils-go/idempotencyutils"
)

// MockGuruInterfaces is a mock of GuruInterfaces interface.
type MockGuruInterfaces struct {
	ctrl     *gomock.Controller
	recorder *MockGuruInterfacesMockRecorder
}

// MockGuruInterfacesMockRecorder is the mock recorder for MockGuruInterfaces.
type MockGuruInterfacesMockRecorder struct {
	mock *MockGuruInterfaces
}

// NewMockGuruInterfaces creates a new mock instance.
func NewMockGuruInterfaces(ctrl *gomock.Controller) *MockGuruInterfaces {
	mock := &MockGuruInterfaces{ctrl: ctrl}
	mock.recorder = &MockGuruInterfacesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuruInterfaces) EXPECT() *MockGuruInterfacesMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockGuruInterfaces) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockGuruInterfacesMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockGuruInterfaces)(nil).Cleanup))
}

// DbClient mocks base method.
func (m *MockGuruInterfaces) DbClient() db.CPDBClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbClient")
	ret0, _ := ret[0].(db.CPDBClientInterface)
	return ret0
}

// DbClient indicates an expected call of DbClient.
func (mr *MockGuruInterfacesMockRecorder) DbClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbClient", reflect.TypeOf((*MockGuruInterfaces)(nil).DbClient))
}

// ErgonClient mocks base method.
func (m *MockGuruInterfaces) ErgonClient() ergon_client.Ergon {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErgonClient")
	ret0, _ := ret[0].(ergon_client.Ergon)
	return ret0
}

// ErgonClient indicates an expected call of ErgonClient.
func (mr *MockGuruInterfacesMockRecorder) ErgonClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErgonClient", reflect.TypeOf((*MockGuruInterfaces)(nil).ErgonClient))
}

// ErgonService mocks base method.
func (m *MockGuruInterfaces) ErgonService() ergon.ErgonClientIfc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErgonService")
	ret0, _ := ret[0].(ergon.ErgonClientIfc)
	return ret0
}

// ErgonService indicates an expected call of ErgonService.
func (mr *MockGuruInterfacesMockRecorder) ErgonService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErgonService", reflect.TypeOf((*MockGuruInterfaces)(nil).ErgonService))
}

// EventForwarder mocks base method.
func (m *MockGuruInterfaces) EventForwarder() events.EventForwarderIfc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventForwarder")
	ret0, _ := ret[0].(events.EventForwarderIfc)
	return ret0
}

// EventForwarder indicates an expected call of EventForwarder.
func (mr *MockGuruInterfacesMockRecorder) EventForwarder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventForwarder", reflect.TypeOf((*MockGuruInterfaces)(nil).EventForwarder))
}

// GenesisClient mocks base method.
func (m *MockGuruInterfaces) GenesisClient() genesis.IGenesisRpcClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisClient")
	ret0, _ := ret[0].(genesis.IGenesisRpcClient)
	return ret0
}

// GenesisClient indicates an expected call of GenesisClient.
func (mr *MockGuruInterfacesMockRecorder) GenesisClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisClient", reflect.TypeOf((*MockGuruInterfaces)(nil).GenesisClient))
}

// GenesisJsonRpcClient mocks base method.
func (m *MockGuruInterfaces) GenesisJsonRpcClient() genesis.GenesisJsonRpcClientIfc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenesisJsonRpcClient")
	ret0, _ := ret[0].(genesis.GenesisJsonRpcClientIfc)
	return ret0
}

// GenesisJsonRpcClient indicates an expected call of GenesisJsonRpcClient.
func (mr *MockGuruInterfacesMockRecorder) GenesisJsonRpcClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenesisJsonRpcClient", reflect.TypeOf((*MockGuruInterfaces)(nil).GenesisJsonRpcClient))
}

// Glog mocks base method.
func (m *MockGuruInterfaces) Glog() external.GlogInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Glog")
	ret0, _ := ret[0].(external.GlogInterface)
	return ret0
}

// Glog indicates an expected call of Glog.
func (mr *MockGuruInterfacesMockRecorder) Glog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Glog", reflect.TypeOf((*MockGuruInterfaces)(nil).Glog))
}

// IdempotencyService mocks base method.
func (m *MockGuruInterfaces) IdempotencyService() idempotencyutils.IdempotencyService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdempotencyService")
	ret0, _ := ret[0].(idempotencyutils.IdempotencyService)
	return ret0
}

// IdempotencyService indicates an expected call of IdempotencyService.
func (mr *MockGuruInterfacesMockRecorder) IdempotencyService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdempotencyService", reflect.TypeOf((*MockGuruInterfaces)(nil).IdempotencyService))
}

// IdfClient mocks base method.
func (m *MockGuruInterfaces) IdfClient() idf.IdfClientIfc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdfClient")
	ret0, _ := ret[0].(idf.IdfClientIfc)
	return ret0
}

// IdfClient indicates an expected call of IdfClient.
func (mr *MockGuruInterfacesMockRecorder) IdfClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdfClient", reflect.TypeOf((*MockGuruInterfaces)(nil).IdfClient))
}

// IdfSvc mocks base method.
func (m *MockGuruInterfaces) IdfSvc() insights_interface.InsightsServiceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdfSvc")
	ret0, _ := ret[0].(insights_interface.InsightsServiceInterface)
	return ret0
}

// IdfSvc indicates an expected call of IdfSvc.
func (mr *MockGuruInterfacesMockRecorder) IdfSvc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdfSvc", reflect.TypeOf((*MockGuruInterfaces)(nil).IdfSvc))
}

// IdfWatcher mocks base method.
func (m *MockGuruInterfaces) IdfWatcher() external.IdfWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdfWatcher")
	ret0, _ := ret[0].(external.IdfWatcher)
	return ret0
}

// IdfWatcher indicates an expected call of IdfWatcher.
func (mr *MockGuruInterfacesMockRecorder) IdfWatcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdfWatcher", reflect.TypeOf((*MockGuruInterfaces)(nil).IdfWatcher))
}

// Proto mocks base method.
func (m *MockGuruInterfaces) Proto() external.MarshalInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proto")
	ret0, _ := ret[0].(external.MarshalInterface)
	return ret0
}

// Proto indicates an expected call of Proto.
func (mr *MockGuruInterfacesMockRecorder) Proto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proto", reflect.TypeOf((*MockGuruInterfaces)(nil).Proto))
}

// RemoteRestClient mocks base method.
func (m *MockGuruInterfaces) RemoteRestClient() guru_api.GuruApiClientIfc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteRestClient")
	ret0, _ := ret[0].(guru_api.GuruApiClientIfc)
	return ret0
}

// RemoteRestClient indicates an expected call of RemoteRestClient.
func (mr *MockGuruInterfacesMockRecorder) RemoteRestClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteRestClient", reflect.TypeOf((*MockGuruInterfaces)(nil).RemoteRestClient))
}

// Uuid mocks base method.
func (m *MockGuruInterfaces) Uuid() external.UuidInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uuid")
	ret0, _ := ret[0].(external.UuidInterface)
	return ret0
}

// Uuid indicates an expected call of Uuid.
func (mr *MockGuruInterfacesMockRecorder) Uuid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uuid", reflect.TypeOf((*MockGuruInterfaces)(nil).Uuid))
}

// ZkClient mocks base method.
func (m *MockGuruInterfaces) ZkClient() zk.ZkClientIfc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZkClient")
	ret0, _ := ret[0].(zk.ZkClientIfc)
	return ret0
}

// ZkClient indicates an expected call of ZkClient.
func (mr *MockGuruInterfacesMockRecorder) ZkClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZkClient", reflect.TypeOf((*MockGuruInterfaces)(nil).ZkClient))
}

// ZkSession mocks base method.
func (m *MockGuruInterfaces) ZkSession() zeus.ZookeeperIfc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZkSession")
	ret0, _ := ret[0].(zeus.ZookeeperIfc)
	return ret0
}

// ZkSession indicates an expected call of ZkSession.
func (mr *MockGuruInterfacesMockRecorder) ZkSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZkSession", reflect.TypeOf((*MockGuruInterfaces)(nil).ZkSession))
}

// MockUuidInterface is a mock of UuidInterface interface.
type MockUuidInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUuidInterfaceMockRecorder
}

// MockUuidInterfaceMockRecorder is the mock recorder for MockUuidInterface.
type MockUuidInterfaceMockRecorder struct {
	mock *MockUuidInterface
}

// NewMockUuidInterface creates a new mock instance.
func NewMockUuidInterface(ctrl *gomock.Controller) *MockUuidInterface {
	mock := &MockUuidInterface{ctrl: ctrl}
	mock.recorder = &MockUuidInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUuidInterface) EXPECT() *MockUuidInterfaceMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockUuidInterface) New() (*uuid4.Uuid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(*uuid4.Uuid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockUuidInterfaceMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockUuidInterface)(nil).New))
}

// MockMarshalInterface is a mock of MarshalInterface interface.
type MockMarshalInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMarshalInterfaceMockRecorder
}

// MockMarshalInterfaceMockRecorder is the mock recorder for MockMarshalInterface.
type MockMarshalInterfaceMockRecorder struct {
	mock *MockMarshalInterface
}

// NewMockMarshalInterface creates a new mock instance.
func NewMockMarshalInterface(ctrl *gomock.Controller) *MockMarshalInterface {
	mock := &MockMarshalInterface{ctrl: ctrl}
	mock.recorder = &MockMarshalInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarshalInterface) EXPECT() *MockMarshalInterfaceMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m_2 *MockMarshalInterface) Marshal(m proto.Message) ([]byte, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Marshal", m)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockMarshalInterfaceMockRecorder) Marshal(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockMarshalInterface)(nil).Marshal), m)
}

// MockGlogInterface is a mock of GlogInterface interface.
type MockGlogInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGlogInterfaceMockRecorder
}

// MockGlogInterfaceMockRecorder is the mock recorder for MockGlogInterface.
type MockGlogInterfaceMockRecorder struct {
	mock *MockGlogInterface
}

// NewMockGlogInterface creates a new mock instance.
func NewMockGlogInterface(ctrl *gomock.Controller) *MockGlogInterface {
	mock := &MockGlogInterface{ctrl: ctrl}
	mock.recorder = &MockGlogInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlogInterface) EXPECT() *MockGlogInterfaceMockRecorder {
	return m.recorder
}

// Fatalf mocks base method.
func (m *MockGlogInterface) Fatalf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockGlogInterfaceMockRecorder) Fatalf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockGlogInterface)(nil).Fatalf), varargs...)
}

// Fatalln mocks base method.
func (m *MockGlogInterface) Fatalln(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalln", varargs...)
}

// Fatalln indicates an expected call of Fatalln.
func (mr *MockGlogInterfaceMockRecorder) Fatalln(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalln", reflect.TypeOf((*MockGlogInterface)(nil).Fatalln), args...)
}
