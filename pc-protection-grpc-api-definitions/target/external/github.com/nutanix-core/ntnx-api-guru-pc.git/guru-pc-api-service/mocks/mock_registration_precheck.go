// Code generated by MockGen. DO NOT EDIT.
// Source: guru-pc-api-service/services/register_aos/registration_precheck/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	guru_error "ntnx-api-guru-pc/guru-pc-api-service/errors/guru_error"
	models "ntnx-api-guru-pc/guru-pc-api-service/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegistrationPrecheckIfc is a mock of RegistrationPrecheckIfc interface.
type MockRegistrationPrecheckIfc struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationPrecheckIfcMockRecorder
}

// MockRegistrationPrecheckIfcMockRecorder is the mock recorder for MockRegistrationPrecheckIfc.
type MockRegistrationPrecheckIfcMockRecorder struct {
	mock *MockRegistrationPrecheckIfc
}

// NewMockRegistrationPrecheckIfc creates a new mock instance.
func NewMockRegistrationPrecheckIfc(ctrl *gomock.Controller) *MockRegistrationPrecheckIfc {
	mock := &MockRegistrationPrecheckIfc{ctrl: ctrl}
	mock.recorder = &MockRegistrationPrecheckIfcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationPrecheckIfc) EXPECT() *MockRegistrationPrecheckIfcMockRecorder {
	return m.recorder
}

// CheckAlreadyRegistered mocks base method.
func (m *MockRegistrationPrecheckIfc) CheckAlreadyRegistered(item *models.Job) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAlreadyRegistered", item)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAlreadyRegistered indicates an expected call of CheckAlreadyRegistered.
func (mr *MockRegistrationPrecheckIfcMockRecorder) CheckAlreadyRegistered(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAlreadyRegistered", reflect.TypeOf((*MockRegistrationPrecheckIfc)(nil).CheckAlreadyRegistered), item)
}

// CheckRegistrationInProgress mocks base method.
func (m *MockRegistrationPrecheckIfc) CheckRegistrationInProgress(item *models.Job) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRegistrationInProgress", item)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckRegistrationInProgress indicates an expected call of CheckRegistrationInProgress.
func (mr *MockRegistrationPrecheckIfcMockRecorder) CheckRegistrationInProgress(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRegistrationInProgress", reflect.TypeOf((*MockRegistrationPrecheckIfc)(nil).CheckRegistrationInProgress), item)
}

// CheckScaleOutInProgress mocks base method.
func (m *MockRegistrationPrecheckIfc) CheckScaleOutInProgress(item *models.Job) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckScaleOutInProgress", item)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckScaleOutInProgress indicates an expected call of CheckScaleOutInProgress.
func (mr *MockRegistrationPrecheckIfcMockRecorder) CheckScaleOutInProgress(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckScaleOutInProgress", reflect.TypeOf((*MockRegistrationPrecheckIfc)(nil).CheckScaleOutInProgress), item)
}

// Execute mocks base method.
func (m *MockRegistrationPrecheckIfc) Execute(item *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockRegistrationPrecheckIfcMockRecorder) Execute(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRegistrationPrecheckIfc)(nil).Execute), item)
}

// ExecuteLocalPrecheck mocks base method.
func (m *MockRegistrationPrecheckIfc) ExecuteLocalPrecheck(item *models.Job) guru_error.GuruErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteLocalPrecheck", item)
	ret0, _ := ret[0].(guru_error.GuruErrorInterface)
	return ret0
}

// ExecuteLocalPrecheck indicates an expected call of ExecuteLocalPrecheck.
func (mr *MockRegistrationPrecheckIfcMockRecorder) ExecuteLocalPrecheck(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteLocalPrecheck", reflect.TypeOf((*MockRegistrationPrecheckIfc)(nil).ExecuteLocalPrecheck), item)
}

// ExecuteRemotePrecheck mocks base method.
func (m *MockRegistrationPrecheckIfc) ExecuteRemotePrecheck(item *models.Job) guru_error.GuruErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteRemotePrecheck", item)
	ret0, _ := ret[0].(guru_error.GuruErrorInterface)
	return ret0
}

// ExecuteRemotePrecheck indicates an expected call of ExecuteRemotePrecheck.
func (mr *MockRegistrationPrecheckIfcMockRecorder) ExecuteRemotePrecheck(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteRemotePrecheck", reflect.TypeOf((*MockRegistrationPrecheckIfc)(nil).ExecuteRemotePrecheck), item)
}

// FetchPCDetails mocks base method.
func (m *MockRegistrationPrecheckIfc) FetchPCDetails(item *models.Job) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPCDetails", item)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchPCDetails indicates an expected call of FetchPCDetails.
func (mr *MockRegistrationPrecheckIfcMockRecorder) FetchPCDetails(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPCDetails", reflect.TypeOf((*MockRegistrationPrecheckIfc)(nil).FetchPCDetails), item)
}

// MakeLocalPCPrecheckCall mocks base method.
func (m *MockRegistrationPrecheckIfc) MakeLocalPCPrecheckCall(item *models.Job) (*models.ClusterRegistrationPrecheckDTO, guru_error.GuruErrorInterface) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeLocalPCPrecheckCall", item)
	ret0, _ := ret[0].(*models.ClusterRegistrationPrecheckDTO)
	ret1, _ := ret[1].(guru_error.GuruErrorInterface)
	return ret0, ret1
}

// MakeLocalPCPrecheckCall indicates an expected call of MakeLocalPCPrecheckCall.
func (mr *MockRegistrationPrecheckIfcMockRecorder) MakeLocalPCPrecheckCall(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeLocalPCPrecheckCall", reflect.TypeOf((*MockRegistrationPrecheckIfc)(nil).MakeLocalPCPrecheckCall), item)
}

// MakeRemotePEPrecheckCall mocks base method.
func (m *MockRegistrationPrecheckIfc) MakeRemotePEPrecheckCall(item *models.Job) (*models.ClusterRegistrationPrecheckDTO, guru_error.GuruErrorInterface) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRemotePEPrecheckCall", item)
	ret0, _ := ret[0].(*models.ClusterRegistrationPrecheckDTO)
	ret1, _ := ret[1].(guru_error.GuruErrorInterface)
	return ret0, ret1
}

// MakeRemotePEPrecheckCall indicates an expected call of MakeRemotePEPrecheckCall.
func (mr *MockRegistrationPrecheckIfcMockRecorder) MakeRemotePEPrecheckCall(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRemotePEPrecheckCall", reflect.TypeOf((*MockRegistrationPrecheckIfc)(nil).MakeRemotePEPrecheckCall), item)
}

// ValidatePCPrecheckResponse mocks base method.
func (m *MockRegistrationPrecheckIfc) ValidatePCPrecheckResponse(item *models.Job, precheckDetailsDTO *models.ClusterRegistrationPrecheckDTO) guru_error.GuruErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePCPrecheckResponse", item, precheckDetailsDTO)
	ret0, _ := ret[0].(guru_error.GuruErrorInterface)
	return ret0
}

// ValidatePCPrecheckResponse indicates an expected call of ValidatePCPrecheckResponse.
func (mr *MockRegistrationPrecheckIfcMockRecorder) ValidatePCPrecheckResponse(item, precheckDetailsDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePCPrecheckResponse", reflect.TypeOf((*MockRegistrationPrecheckIfc)(nil).ValidatePCPrecheckResponse), item, precheckDetailsDTO)
}

// ValidatePEPrecheckResponse mocks base method.
func (m *MockRegistrationPrecheckIfc) ValidatePEPrecheckResponse(item *models.Job, precheckDetailsDTO *models.ClusterRegistrationPrecheckDTO) guru_error.GuruErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePEPrecheckResponse", item, precheckDetailsDTO)
	ret0, _ := ret[0].(guru_error.GuruErrorInterface)
	return ret0
}

// ValidatePEPrecheckResponse indicates an expected call of ValidatePEPrecheckResponse.
func (mr *MockRegistrationPrecheckIfcMockRecorder) ValidatePEPrecheckResponse(item, precheckDetailsDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePEPrecheckResponse", reflect.TypeOf((*MockRegistrationPrecheckIfc)(nil).ValidatePEPrecheckResponse), item, precheckDetailsDTO)
}
