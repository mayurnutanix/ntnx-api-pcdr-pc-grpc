// Code generated by MockGen. DO NOT EDIT.
// Source: /opt/homebrew/Cellar/go/1.22.4/bin/pkg/mod/github.com/nutanix-core/go-cache@v0.0.0-20240616123053-5c075257d96c/insights/insights_interface/insights_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/golang/protobuf/proto"
	insights_interface "github.com/nutanix-core/go-cache/insights/insights_interface"
	misc "github.com/nutanix-core/go-cache/util-go/misc"
)

// MockInsightsServiceInterface is a mock of InsightsServiceInterface interface.
type MockInsightsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInsightsServiceInterfaceMockRecorder
}

// MockInsightsServiceInterfaceMockRecorder is the mock recorder for MockInsightsServiceInterface.
type MockInsightsServiceInterfaceMockRecorder struct {
	mock *MockInsightsServiceInterface
}

// NewMockInsightsServiceInterface creates a new mock instance.
func NewMockInsightsServiceInterface(ctrl *gomock.Controller) *MockInsightsServiceInterface {
	mock := &MockInsightsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockInsightsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsightsServiceInterface) EXPECT() *MockInsightsServiceInterfaceMockRecorder {
	return m.recorder
}

// CursorQuery mocks base method.
func (m *MockInsightsServiceInterface) CursorQuery(resultChan chan<- *insights_interface.EntityWithMetric, arg *insights_interface.GetEntitiesWithMetricsArg, batchSize uint32, backoff *misc.ExponentialBackoff, timeoutSecs int64, errChan chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CursorQuery", resultChan, arg, batchSize, backoff, timeoutSecs, errChan)
}

// CursorQuery indicates an expected call of CursorQuery.
func (mr *MockInsightsServiceInterfaceMockRecorder) CursorQuery(resultChan, arg, batchSize, backoff, timeoutSecs, errChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorQuery", reflect.TypeOf((*MockInsightsServiceInterface)(nil).CursorQuery), resultChan, arg, batchSize, backoff, timeoutSecs, errChan)
}

// GetMasterLocation mocks base method.
func (m *MockInsightsServiceInterface) GetMasterLocation(backoff *misc.ExponentialBackoff) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterLocation", backoff)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterLocation indicates an expected call of GetMasterLocation.
func (mr *MockInsightsServiceInterfaceMockRecorder) GetMasterLocation(backoff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterLocation", reflect.TypeOf((*MockInsightsServiceInterface)(nil).GetMasterLocation), backoff)
}

// GetRequestTimeout mocks base method.
func (m *MockInsightsServiceInterface) GetRequestTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRequestTimeout indicates an expected call of GetRequestTimeout.
func (mr *MockInsightsServiceInterfaceMockRecorder) GetRequestTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestTimeout", reflect.TypeOf((*MockInsightsServiceInterface)(nil).GetRequestTimeout))
}

// IsRetryError mocks base method.
func (m *MockInsightsServiceInterface) IsRetryError(err error) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetryError", err)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRetryError indicates an expected call of IsRetryError.
func (mr *MockInsightsServiceInterfaceMockRecorder) IsRetryError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetryError", reflect.TypeOf((*MockInsightsServiceInterface)(nil).IsRetryError), err)
}

// SendMsg mocks base method.
func (m *MockInsightsServiceInterface) SendMsg(service string, request, response proto.Message, backoff *misc.ExponentialBackoff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", service, request, response, backoff)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockInsightsServiceInterfaceMockRecorder) SendMsg(service, request, response, backoff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockInsightsServiceInterface)(nil).SendMsg), service, request, response, backoff)
}

// SendMsgWithContextAndTimeout mocks base method.
func (m *MockInsightsServiceInterface) SendMsgWithContextAndTimeout(ctx context.Context, service string, request, response proto.Message, backoff *misc.ExponentialBackoff, timeoutSecs int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsgWithContextAndTimeout", ctx, service, request, response, backoff, timeoutSecs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsgWithContextAndTimeout indicates an expected call of SendMsgWithContextAndTimeout.
func (mr *MockInsightsServiceInterfaceMockRecorder) SendMsgWithContextAndTimeout(ctx, service, request, response, backoff, timeoutSecs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsgWithContextAndTimeout", reflect.TypeOf((*MockInsightsServiceInterface)(nil).SendMsgWithContextAndTimeout), ctx, service, request, response, backoff, timeoutSecs)
}

// SendMsgWithTimeout mocks base method.
func (m *MockInsightsServiceInterface) SendMsgWithTimeout(service string, request, response proto.Message, backoff *misc.ExponentialBackoff, timeoutSecs int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsgWithTimeout", service, request, response, backoff, timeoutSecs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsgWithTimeout indicates an expected call of SendMsgWithTimeout.
func (mr *MockInsightsServiceInterfaceMockRecorder) SendMsgWithTimeout(service, request, response, backoff, timeoutSecs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsgWithTimeout", reflect.TypeOf((*MockInsightsServiceInterface)(nil).SendMsgWithTimeout), service, request, response, backoff, timeoutSecs)
}

// SetRequestTimeout mocks base method.
func (m *MockInsightsServiceInterface) SetRequestTimeout(timeout int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRequestTimeout", timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRequestTimeout indicates an expected call of SetRequestTimeout.
func (mr *MockInsightsServiceInterfaceMockRecorder) SetRequestTimeout(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequestTimeout", reflect.TypeOf((*MockInsightsServiceInterface)(nil).SetRequestTimeout), timeout)
}
