// Code generated by MockGen. DO NOT EDIT.
// Source: guru-pc-api-service/services/register/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	guru_error "ntnx-api-guru-pc/guru-pc-api-service/errors/guru_error"
	models "ntnx-api-guru-pc/guru-pc-api-service/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegister is a mock of Register interface.
type MockRegister struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterMockRecorder
}

// MockRegisterMockRecorder is the mock recorder for MockRegister.
type MockRegisterMockRecorder struct {
	mock *MockRegister
}

// NewMockRegister creates a new mock instance.
func NewMockRegister(ctrl *gomock.Controller) *MockRegister {
	mock := &MockRegister{ctrl: ctrl}
	mock.recorder = &MockRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegister) EXPECT() *MockRegisterMockRecorder {
	return m.recorder
}

// ConfigureEntities mocks base method.
func (m *MockRegister) ConfigureEntities(job *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureEntities", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureEntities indicates an expected call of ConfigureEntities.
func (mr *MockRegisterMockRecorder) ConfigureEntities(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureEntities", reflect.TypeOf((*MockRegister)(nil).ConfigureEntities), job)
}

// RunPostActions mocks base method.
func (m *MockRegister) RunPostActions(job *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPostActions", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPostActions indicates an expected call of RunPostActions.
func (mr *MockRegisterMockRecorder) RunPostActions(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPostActions", reflect.TypeOf((*MockRegister)(nil).RunPostActions), job)
}

// RunPreActions mocks base method.
func (m *MockRegister) RunPreActions(job *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreActions", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPreActions indicates an expected call of RunPreActions.
func (mr *MockRegisterMockRecorder) RunPreActions(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreActions", reflect.TypeOf((*MockRegister)(nil).RunPreActions), job)
}

// SetupTrust mocks base method.
func (m *MockRegister) SetupTrust(job *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupTrust", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupTrust indicates an expected call of SetupTrust.
func (mr *MockRegisterMockRecorder) SetupTrust(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupTrust", reflect.TypeOf((*MockRegister)(nil).SetupTrust), job)
}

// MockUnregister is a mock of Unregister interface.
type MockUnregister struct {
	ctrl     *gomock.Controller
	recorder *MockUnregisterMockRecorder
}

// MockUnregisterMockRecorder is the mock recorder for MockUnregister.
type MockUnregisterMockRecorder struct {
	mock *MockUnregister
}

// NewMockUnregister creates a new mock instance.
func NewMockUnregister(ctrl *gomock.Controller) *MockUnregister {
	mock := &MockUnregister{ctrl: ctrl}
	mock.recorder = &MockUnregisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnregister) EXPECT() *MockUnregisterMockRecorder {
	return m.recorder
}

// RemoveTrust mocks base method.
func (m *MockUnregister) RemoveTrust(job *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrust", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrust indicates an expected call of RemoveTrust.
func (mr *MockUnregisterMockRecorder) RemoveTrust(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrust", reflect.TypeOf((*MockUnregister)(nil).RemoveTrust), job)
}

// RunPostActions mocks base method.
func (m *MockUnregister) RunPostActions(job *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPostActions", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPostActions indicates an expected call of RunPostActions.
func (mr *MockUnregisterMockRecorder) RunPostActions(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPostActions", reflect.TypeOf((*MockUnregister)(nil).RunPostActions), job)
}

// RunPreActions mocks base method.
func (m *MockUnregister) RunPreActions(job *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPreActions", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPreActions indicates an expected call of RunPreActions.
func (mr *MockUnregisterMockRecorder) RunPreActions(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPreActions", reflect.TypeOf((*MockUnregister)(nil).RunPreActions), job)
}

// UnconfigureEntities mocks base method.
func (m *MockUnregister) UnconfigureEntities(job *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnconfigureEntities", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnconfigureEntities indicates an expected call of UnconfigureEntities.
func (mr *MockUnregisterMockRecorder) UnconfigureEntities(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnconfigureEntities", reflect.TypeOf((*MockUnregister)(nil).UnconfigureEntities), job)
}

// MockPrecheck is a mock of Precheck interface.
type MockPrecheck struct {
	ctrl     *gomock.Controller
	recorder *MockPrecheckMockRecorder
}

// MockPrecheckMockRecorder is the mock recorder for MockPrecheck.
type MockPrecheckMockRecorder struct {
	mock *MockPrecheck
}

// NewMockPrecheck creates a new mock instance.
func NewMockPrecheck(ctrl *gomock.Controller) *MockPrecheck {
	mock := &MockPrecheck{ctrl: ctrl}
	mock.recorder = &MockPrecheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrecheck) EXPECT() *MockPrecheckMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockPrecheck) Execute(job *models.Job) guru_error.GuruErrorInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", job)
	ret0, _ := ret[0].(guru_error.GuruErrorInterface)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockPrecheckMockRecorder) Execute(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPrecheck)(nil).Execute), job)
}
